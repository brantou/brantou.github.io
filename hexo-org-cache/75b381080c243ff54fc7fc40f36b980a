{"md5":"f05d3431bdcf99d714f5205d12b8484f","content":"\n\n\n<div id=\"outline-container-sec-1\" class=\"outline-2\">\n<h2 id=\"sec-1\"><a id=\"ID-915f0858-db09-4413-9968-35a7c73ee1b1\" name=\"ID-915f0858-db09-4413-9968-35a7c73ee1b1\"></a><span class=\"section-number-2\">1</span> <span class=\"done DONE\">DONE</span> 排序</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-20 Tue 18:34]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-1-1\" class=\"outline-3\">\n<h3 id=\"sec-1-1\"><a id=\"ID-ca861d4e-b512-4f90-85c7-3f78cf1620d2\" name=\"ID-ca861d4e-b512-4f90-85c7-3f78cf1620d2\"></a><span class=\"section-number-3\">1.1</span> <span class=\"done DONE\">DONE</span> 两个有序数组合并</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> merge(A, B []<span class=\"typename\">int</span>) []<span class=\"typename\">int</span> {</span><br><span class=\"line\">  C := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  a_i, b_i := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> a_i &lt; <span class=\"built_in\">len</span>(A) &amp;&amp; b_i &lt; <span class=\"built_in\">len</span>(B) {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> A[a_i] &gt; B[b_i] {</span><br><span class=\"line\">      C = <span class=\"built_in\">append</span>(C, B[b_i])</span><br><span class=\"line\">      b_i += <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> A[a_i] &lt; B[b_i] {</span><br><span class=\"line\">      C = <span class=\"built_in\">append</span>(C, A[a_i])</span><br><span class=\"line\">      a_i += <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      C = <span class=\"built_in\">append</span>(C, A[a_i], B[b_i])</span><br><span class=\"line\">      a_i += <span class=\"number\">1</span></span><br><span class=\"line\">      b_i += <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> a_i &lt; <span class=\"built_in\">len</span>(A) {</span><br><span class=\"line\">    C = <span class=\"built_in\">append</span>(C, A[a_i:]...)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> b_i &lt; <span class=\"built_in\">len</span>(B) {</span><br><span class=\"line\">    C = <span class=\"built_in\">append</span>(C, B[b_i:]...)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> C</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  fmt.Println(merge([]<span class=\"typename\">int</span>{<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>}, []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>}))</span><br><span class=\"line\">  fmt.Println(merge([]<span class=\"typename\">int</span>{<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>}, []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>}))</span><br><span class=\"line\">  fmt.Println(merge([]<span class=\"typename\">int</span>{<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>}, []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">10</span>}))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-2\" class=\"outline-3\">\n<h3 id=\"sec-1-2\"><a id=\"ID-c9ab4b3f-69eb-45ac-af44-079f793d586d\" name=\"ID-c9ab4b3f-69eb-45ac-af44-079f793d586d\"></a><span class=\"section-number-3\">1.2</span> <span class=\"done DONE\">DONE</span> 插入排序</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-17 Sat 13:10]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> isort(nums []<span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">len</span>(nums); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := i; j &gt; <span class=\"number\">0</span>; j -= <span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> nums[j-<span class=\"number\">1</span>] &gt; nums[j] {</span><br><span class=\"line\">\tnums[j-<span class=\"number\">1</span>], nums[j] = nums[j], nums[j-<span class=\"number\">1</span>]</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  nums := []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">1</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">4</span>}</span><br><span class=\"line\">  isort(nums)</span><br><span class=\"line\">  fmt.Println(nums)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-3\" class=\"outline-3\">\n<h3 id=\"sec-1-3\"><a id=\"ID-123b6710-348e-4f4d-b30e-73232869f96e\" name=\"ID-123b6710-348e-4f4d-b30e-73232869f96e\"></a><span class=\"section-number-3\">1.3</span> <span class=\"done DONE\">DONE</span> 二分排序</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> bsort(nums []<span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) == <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  bsort(nums[<span class=\"number\">0</span> : <span class=\"built_in\">len</span>(nums)/<span class=\"number\">2</span>])</span><br><span class=\"line\">  bsort(nums[<span class=\"built_in\">len</span>(nums)/<span class=\"number\">2</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">copy</span>(nums, merge(nums[<span class=\"number\">0</span>:<span class=\"built_in\">len</span>(nums)/<span class=\"number\">2</span>], nums[<span class=\"built_in\">len</span>(nums)/<span class=\"number\">2</span>:]))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  nums := []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">8</span>}</span><br><span class=\"line\">  bsort(nums)</span><br><span class=\"line\">  fmt.Println(nums)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-4\" class=\"outline-3\">\n<h3 id=\"sec-1-4\"><a id=\"ID-43557b0f-0c85-41ee-966f-98f003ca9326\" name=\"ID-43557b0f-0c85-41ee-966f-98f003ca9326\"></a><span class=\"section-number-3\">1.4</span> <span class=\"done DONE\">DONE</span> 快速排序</h3>\n<div class=\"outline-text-3\" id=\"text-1-4\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> qsort(nums []<span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) &lt; <span class=\"number\">2</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  p := partition(nums)</span><br><span class=\"line\">  qsort(nums[<span class=\"number\">0</span>:p])</span><br><span class=\"line\">  qsort(nums[p+<span class=\"number\">1</span>:])</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> partition(nums []<span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  r := rand.Intn(<span class=\"built_in\">len</span>(nums))</span><br><span class=\"line\">  nums[r], nums[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>], nums[r]</span><br><span class=\"line\">  mid := nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">  s, e := <span class=\"number\">0</span>, <span class=\"built_in\">len</span>(nums)-<span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> s &lt; e {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> s &lt; e &amp;&amp; nums[e] &gt;= mid {</span><br><span class=\"line\">      e -= <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> s &lt; e {</span><br><span class=\"line\">      nums[s] = nums[e]</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> s &lt; e &amp;&amp; nums[s] &lt;= mid {</span><br><span class=\"line\">      s += <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> s &lt; e {</span><br><span class=\"line\">      nums[e] = nums[s]</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  nums[s] = mid</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  nums := []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">10</span>, <span class=\"number\">7</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>}</span><br><span class=\"line\">  qsort(nums)</span><br><span class=\"line\">  fmt.Println(nums)</span><br><span class=\"line\">  nums = []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>}</span><br><span class=\"line\">  qsort(nums)</span><br><span class=\"line\">  fmt.Println(nums)</span><br><span class=\"line\">  nums = []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">8</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">10</span>, <span class=\"number\">11</span>, <span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">3</span>}</span><br><span class=\"line\">  qsort(nums)</span><br><span class=\"line\">  fmt.Println(nums)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-5\" class=\"outline-3\">\n<h3 id=\"sec-1-5\"><a id=\"ID-c2f17336-c6f1-4ed5-aa72-96def0957f9d\" name=\"ID-c2f17336-c6f1-4ed5-aa72-96def0957f9d\"></a><span class=\"section-number-3\">1.5</span> <span class=\"done DONE\">DONE</span> 堆排序</h3>\n<div class=\"outline-text-3\" id=\"text-1-5\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> parent(i <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (i - <span class=\"number\">1</span>) / <span class=\"number\">2</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> left(i <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span>*i + <span class=\"number\">1</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> right(i <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span>*i + <span class=\"number\">2</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> heapDown(nums []<span class=\"typename\">int</span>, start, end <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  p := start</span><br><span class=\"line\">  l := left(p)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l &gt; end {</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> l &lt; end &amp;&amp; nums[l] &lt; nums[l+<span class=\"number\">1</span>] {</span><br><span class=\"line\">      l += <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[p] &gt;= nums[l] {</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      nums[l], nums[p] = nums[p], nums[l]</span><br><span class=\"line\">      p = l</span><br><span class=\"line\">      l = left(p)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> hsort(nums []<span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(nums) / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i -= <span class=\"number\">1</span> {</span><br><span class=\"line\">    heapDown(nums, i, <span class=\"built_in\">len</span>(nums)-<span class=\"number\">1</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>; i &gt; <span class=\"number\">0</span>; i -= <span class=\"number\">1</span> {</span><br><span class=\"line\">    nums[i], nums[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>], nums[i]</span><br><span class=\"line\"></span><br><span class=\"line\">    heapDown(nums, <span class=\"number\">0</span>, i-<span class=\"number\">1</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  nums := []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>}</span><br><span class=\"line\">  hsort(nums)</span><br><span class=\"line\">  fmt.Println(nums)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-6\" class=\"outline-3\">\n<h3 id=\"sec-1-6\"><a id=\"ID-a5f4a396-28f6-4dc1-b419-84caeb0aa2eb\" name=\"ID-a5f4a396-28f6-4dc1-b419-84caeb0aa2eb\"></a><span class=\"section-number-3\">1.6</span> <span class=\"done DONE\">DONE</span> 计数排序</h3>\n<div class=\"outline-text-3\" id=\"text-1-6\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> countingSort(nums []<span class=\"typename\">int</span>) []<span class=\"typename\">int</span> {</span><br><span class=\"line\">  max := nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, num := <span class=\"keyword\">range</span> nums {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num &gt; max {</span><br><span class=\"line\">      max = num</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  ansArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(nums))</span><br><span class=\"line\">  countArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, max+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(nums); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    countArr[nums[i]] += <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">len</span>(countArr); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    countArr[i] += countArr[i-<span class=\"number\">1</span>]</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -= <span class=\"number\">1</span> {</span><br><span class=\"line\">    ansArr[countArr[nums[i]]-<span class=\"number\">1</span>] = nums[i]</span><br><span class=\"line\">    countArr[nums[i]] -= <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ansArr</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  nums := []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">7</span>, <span class=\"number\">6</span>, <span class=\"number\">8</span>, <span class=\"number\">7</span>, <span class=\"number\">5</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>}</span><br><span class=\"line\">  fmt.Println(countingSort(nums))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-7\" class=\"outline-3\">\n<h3 id=\"sec-1-7\"><a id=\"ID-9030ea7b-3d2c-41e5-92da-032200893778\" name=\"ID-9030ea7b-3d2c-41e5-92da-032200893778\"></a><span class=\"section-number-3\">1.7</span> <span class=\"done DONE\">DONE</span> 基数排序</h3>\n<div class=\"outline-text-3\" id=\"text-1-7\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> radixSort(nums []<span class=\"typename\">int</span>) []<span class=\"typename\">int</span> {</span><br><span class=\"line\">  max := nums[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, num := <span class=\"keyword\">range</span> nums {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num &gt; max {</span><br><span class=\"line\">      max = num</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  d := <span class=\"number\">1</span></span><br><span class=\"line\">  tmp_max := max</span><br><span class=\"line\">  <span class=\"keyword\">for</span> tmp_max &gt; <span class=\"number\">0</span> {</span><br><span class=\"line\">    tmp_max /= <span class=\"number\">10</span></span><br><span class=\"line\">    d += <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; d; i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    nums = countingSort(nums, i)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nums</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> countingSort(nums []<span class=\"typename\">int</span>, d <span class=\"typename\">int</span>) []<span class=\"typename\">int</span> {</span><br><span class=\"line\">  max := <span class=\"number\">9</span></span><br><span class=\"line\">  ansArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(nums))</span><br><span class=\"line\">  countArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, max+<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(nums); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    countArr[getBit(nums[i], d)] += <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">len</span>(countArr); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    countArr[i] += countArr[i-<span class=\"number\">1</span>]</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(nums) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -= <span class=\"number\">1</span> {</span><br><span class=\"line\">    ansArr[countArr[getBit(nums[i], d)]-<span class=\"number\">1</span>] = nums[i]</span><br><span class=\"line\">    countArr[getBit(nums[i], d)] -= <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ansArr</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> getBit(num, d <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> num != <span class=\"number\">0</span> &amp;&amp; d &gt; <span class=\"number\">0</span> {</span><br><span class=\"line\">    num /= <span class=\"number\">10</span></span><br><span class=\"line\">    d -= <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> num % <span class=\"number\">10</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  nums := []<span class=\"typename\">int</span>{<span class=\"number\">123</span>, <span class=\"number\">336</span>, <span class=\"number\">255</span>, <span class=\"number\">298</span>, <span class=\"number\">321</span>, <span class=\"number\">49</span>, <span class=\"number\">82</span>, <span class=\"number\">93</span>, <span class=\"number\">78</span>, <span class=\"number\">65</span>, <span class=\"number\">81</span>, <span class=\"number\">73</span>, <span class=\"number\">550</span>, <span class=\"number\">425</span>, <span class=\"number\">68</span>, <span class=\"number\">72</span>}</span><br><span class=\"line\">  fmt.Println(radixSort(nums))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-1-8\" class=\"outline-3\">\n<h3 id=\"sec-1-8\"><a id=\"ID-0d733dc0-0abd-4ae9-8937-5ca35b1e8fe1\" name=\"ID-0d733dc0-0abd-4ae9-8937-5ca35b1e8fe1\"></a><span class=\"section-number-3\">1.8</span> <span class=\"done DONE\">DONE</span> 桶排序</h3>\n<div class=\"outline-text-3\" id=\"text-1-8\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ListNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  next *ListNode</span><br><span class=\"line\">  num  <span class=\"typename\">int</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> insert(h *ListNode, val <span class=\"typename\">int</span>) *ListNode {</span><br><span class=\"line\">  newNode := &amp;ListNode{num: val}</span><br><span class=\"line\">  dummyNode := &amp;ListNode{next: h}</span><br><span class=\"line\">  pre := dummyNode</span><br><span class=\"line\">  curr := h</span><br><span class=\"line\">  <span class=\"keyword\">for</span> curr != <span class=\"constant\">nil</span> &amp;&amp; curr.num &lt;= val {</span><br><span class=\"line\">    pre = curr</span><br><span class=\"line\">    curr = curr.next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  newNode.next = curr</span><br><span class=\"line\">  pre.next = newNode</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dummyNode.next</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> merge(lh, rh *ListNode) *ListNode {</span><br><span class=\"line\">  dummyNode := &amp;ListNode{}</span><br><span class=\"line\">  dummy := dummyNode</span><br><span class=\"line\">  <span class=\"keyword\">for</span> lh != <span class=\"constant\">nil</span> &amp;&amp; rh != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> lh.num &lt;= rh.num {</span><br><span class=\"line\">      dummy.next = lh</span><br><span class=\"line\">      lh = lh.next</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      dummy.next = rh</span><br><span class=\"line\">      rh = rh.next</span><br><span class=\"line\">    }</span><br><span class=\"line\">    dummy = dummy.next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> lh != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.next = lh</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> rh != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.next = rh</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dummyNode.next</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> BucketSort(nums []<span class=\"typename\">int</span>, bucket_num <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  buckets := <span class=\"built_in\">make</span>([]*ListNode, bucket_num)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, num := <span class=\"keyword\">range</span> nums {</span><br><span class=\"line\">    i := num / bucket_num</span><br><span class=\"line\">    h := buckets[i]</span><br><span class=\"line\">    buckets[i] = insert(h, num)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  h := buckets[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">len</span>(buckets); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    h = merge(h, buckets[i])</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(buckets); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    nums[i] = h.num</span><br><span class=\"line\">    h = h.next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  nums := []<span class=\"typename\">int</span>{<span class=\"number\">22</span>, <span class=\"number\">25</span>, <span class=\"number\">11</span>, <span class=\"number\">15</span>, <span class=\"number\">33</span>, <span class=\"number\">44</span>, <span class=\"number\">55</span>, <span class=\"number\">66</span>, <span class=\"number\">77</span>, <span class=\"number\">88</span>, <span class=\"number\">99</span>}</span><br><span class=\"line\">  BucketSort(nums, <span class=\"number\">10</span>)</span><br><span class=\"line\">  fmt.Println(nums)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2\" class=\"outline-2\">\n<h2 id=\"sec-2\"><a id=\"ID-01b09e9a-36cd-4739-a4fa-cea840de36c1\" name=\"ID-01b09e9a-36cd-4739-a4fa-cea840de36c1\"></a><span class=\"section-number-2\">2</span> <span class=\"done DONE\">DONE</span> 查找</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div>\n\n<div id=\"outline-container-sec-2-1\" class=\"outline-3\">\n<h3 id=\"sec-2-1\"><a id=\"ID-adacefc0-0fa1-40f7-ab6e-48b02ea9a413\" name=\"ID-adacefc0-0fa1-40f7-ab6e-48b02ea9a413\"></a><span class=\"section-number-3\">2.1</span> <span class=\"done DONE\">DONE</span> 二分查找</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 11:28]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-2-1-1\" class=\"outline-4\">\n<h4 id=\"sec-2-1-1\"><a id=\"ID-a8b4c19d-f70b-4de9-a5a8-7e04764a783a\" name=\"ID-a8b4c19d-f70b-4de9-a5a8-7e04764a783a\"></a><span class=\"section-number-4\">2.1.1</span> <span class=\"done DONE\">DONE</span> 递归</h4>\n<div class=\"outline-text-4\" id=\"text-2-1-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 11:28]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> binarySearch(nums []<span class=\"typename\">int</span>, start, end, target <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> start &gt; end {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  mid := start + (end-start)/<span class=\"number\">2</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> nums[mid] &gt; target {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binarySearch(nums, start, mid-<span class=\"number\">1</span>, target)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid] &lt; target {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> binarySearch(nums, mid+<span class=\"number\">1</span>, end, target)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2-1-2\" class=\"outline-4\">\n<h4 id=\"sec-2-1-2\"><a id=\"ID-72505e26-9f63-42f2-bcc1-c8faf0005e41\" name=\"ID-72505e26-9f63-42f2-bcc1-c8faf0005e41\"></a><span class=\"section-number-4\">2.1.2</span> <span class=\"done DONE\">DONE</span> 非递归</h4>\n<div class=\"outline-text-4\" id=\"text-2-1-2\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 11:28]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> binarySearch(nums []<span class=\"typename\">int</span>, start, end, target <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> start &gt; end {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    mid := start + (end-start)/<span class=\"number\">2</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> nums[mid] &gt; target {</span><br><span class=\"line\">      end = mid - <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid] &lt; target {</span><br><span class=\"line\">      start = mid + <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-2-2\" class=\"outline-3\">\n<h3 id=\"sec-2-2\"><a id=\"ID-411d96fc-326f-42fa-9710-e3c81d772d52\" name=\"ID-411d96fc-326f-42fa-9710-e3c81d772d52\"></a><span class=\"section-number-3\">2.2</span> <span class=\"done DONE\">DONE</span> 插值查找</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 11:24]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> interpolationSearch(nums []<span class=\"typename\">int</span>, start, end, target <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> start &gt; end {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  mid := start + (target-nums[start])/(nums[end]-nums[start])*(end-start)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> nums[mid] &gt; target {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> interpolationSearch(nums, start, mid-<span class=\"number\">1</span>, target)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> nums[mid] &lt; target {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> interpolationSearch(nums, mid+<span class=\"number\">1</span>, end, target)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2-3\" class=\"outline-3\">\n<h3 id=\"sec-2-3\"><a id=\"ID-03caef7b-8cc2-4461-8bb1-2ecb97e1059c\" name=\"ID-03caef7b-8cc2-4461-8bb1-2ecb97e1059c\"></a><span class=\"section-number-3\">2.3</span> <span class=\"done DONE\">DONE</span> 斐波那契查找</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> FibonacciFunc <span class=\"keyword\">func</span>(<span class=\"typename\">int</span>) <span class=\"typename\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> GenFibonacciFunc(size <span class=\"typename\">int</span>) FibonacciFunc {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> size &lt; <span class=\"number\">2</span> {</span><br><span class=\"line\">    size = <span class=\"number\">2</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  capacity := <span class=\"number\">20</span></span><br><span class=\"line\">  nums := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, size, capacity)</span><br><span class=\"line\">  nums[<span class=\"number\">0</span>] = <span class=\"number\">0</span></span><br><span class=\"line\">  nums[<span class=\"number\">1</span>] = <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">2</span>; i &lt; <span class=\"built_in\">len</span>(nums); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    nums[i] = nums[i-<span class=\"number\">1</span>] + nums[i-<span class=\"number\">2</span>]</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">func</span>(index <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(nums) &gt; index {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> nums[index]</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    csize := <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> csize &lt;= index {</span><br><span class=\"line\">      nums = <span class=\"built_in\">append</span>(nums, nums[csize-<span class=\"number\">1</span>]+nums[csize-<span class=\"number\">2</span>])</span><br><span class=\"line\">      csize += <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums[index]</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> fibonacciSearch(nums []<span class=\"typename\">int</span>, target <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  fibFunc := GenFibonacciFunc(<span class=\"number\">10</span>)</span><br><span class=\"line\">  size := <span class=\"built_in\">len</span>(nums)</span><br><span class=\"line\">  start, end := <span class=\"number\">0</span>, size-<span class=\"number\">1</span></span><br><span class=\"line\">  fi := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> size &gt; fibFunc(fi) {</span><br><span class=\"line\">      fi += <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> start &gt; end {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// adjust fi</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> start+fibFunc(fi-<span class=\"number\">1</span>)-<span class=\"number\">1</span> &gt; end {</span><br><span class=\"line\">      fi -= <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    mid := start + fibFunc(fi-<span class=\"number\">1</span>) - <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> target &lt; nums[mid] {</span><br><span class=\"line\">      end = mid - <span class=\"number\">1</span></span><br><span class=\"line\">      fi -= <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> target &gt; nums[mid] {</span><br><span class=\"line\">      start = mid + <span class=\"number\">1</span></span><br><span class=\"line\">      fi -= <span class=\"number\">2</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> mid</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  nums := []<span class=\"typename\">int</span>{<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>}</span><br><span class=\"line\">  fmt.Println(fibonacciSearch(nums, <span class=\"number\">1</span>))</span><br><span class=\"line\">  fmt.Println(fibonacciSearch(nums, <span class=\"number\">10</span>))</span><br><span class=\"line\">  fmt.Println(fibonacciSearch(nums, <span class=\"number\">5</span>))</span><br><span class=\"line\">  fmt.Println(fibonacciSearch(nums, <span class=\"number\">15</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2-4\" class=\"outline-3\">\n<h3 id=\"sec-2-4\"><a id=\"ID-eaf9c566-b0ea-479f-ac07-e57dfe92d841\" name=\"ID-eaf9c566-b0ea-479f-ac07-e57dfe92d841\"></a><span class=\"section-number-3\">2.4</span> <span class=\"done DONE\">DONE</span> 字符串暴力匹配</h3>\n<div class=\"outline-text-3\" id=\"text-2-4\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> violenMatch(s, p <span class=\"typename\">string</span>) <span class=\"typename\">bool</span> {</span><br><span class=\"line\">  sLen, pLen := <span class=\"built_in\">len</span>(s), <span class=\"built_in\">len</span>(p)</span><br><span class=\"line\">  si, pi := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> si &lt; sLen &amp;&amp; pi &lt; pLen {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> s[si] == p[pi] {</span><br><span class=\"line\">      si += <span class=\"number\">1</span></span><br><span class=\"line\">      pi += <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      si = si - pi + <span class=\"number\">1</span></span><br><span class=\"line\">      pi = <span class=\"number\">0</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> pi == pLen {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">true</span></span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">false</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  fmt.Println(violenMatch(<span class=\"string\">\"BBC ABCDAB ABCDABCDABDE\"</span>, <span class=\"string\">\"ABCDABD\"</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-2-5\" class=\"outline-3\">\n<h3 id=\"sec-2-5\"><a id=\"ID-08e60705-59af-4912-b8fb-b545f70c965c\" name=\"ID-08e60705-59af-4912-b8fb-b545f70c965c\"></a><span class=\"section-number-3\">2.5</span> <span class=\"done DONE\">DONE</span> KMP算法</h3>\n<div class=\"outline-text-3\" id=\"text-2-5\">\n\n<p>\n假设现在文本串S匹配到 i 位置，模式串P匹配到 j 位置:\n</p>\n<ul class=\"org-ul\">\n<li>如果j = -1，或者当前字符匹配成功（即S[i] <b>==</b> P[j]），都令i++，j++，继续匹配下一个字符\n</li>\n<li>如果j != -1，且当前字符匹配失败（即S[i] != P[j]），则令 i 不变，j = next[j]。\n此举意味着失配时，模式串P相对于文本串S向右移动了 j-next[j] 位\n</li>\n</ul>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> getNext(p <span class=\"typename\">string</span>) []<span class=\"typename\">int</span> {</span><br><span class=\"line\">  pLen := <span class=\"built_in\">len</span>(p)</span><br><span class=\"line\">  next := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, pLen)</span><br><span class=\"line\">  next[<span class=\"number\">0</span>] = -<span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  k, j := -<span class=\"number\">1</span>, <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> j &lt; pLen-<span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> k == -<span class=\"number\">1</span> || p[j] == p[k] {</span><br><span class=\"line\">      k += <span class=\"number\">1</span></span><br><span class=\"line\">      j += <span class=\"number\">1</span></span><br><span class=\"line\">      next[j] = k</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      k = next[k]</span><br><span class=\"line\">    }</span><br><span class=\"line\">    fmt.Println(next, j, k)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> next</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> kmpMatch(s, p <span class=\"typename\">string</span>) <span class=\"typename\">bool</span> {</span><br><span class=\"line\">  next := getNext(p)</span><br><span class=\"line\"></span><br><span class=\"line\">  sLen := <span class=\"built_in\">len</span>(s)</span><br><span class=\"line\">  pLen := <span class=\"built_in\">len</span>(p)</span><br><span class=\"line\"></span><br><span class=\"line\">  i, j := <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i &lt; sLen &amp;&amp; j &lt; pLen {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> j == -<span class=\"number\">1</span> || s[i] == p[j] {</span><br><span class=\"line\">      i += <span class=\"number\">1</span></span><br><span class=\"line\">      j += <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      j = next[j]</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> j == pLen {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">true</span></span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">false</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  fmt.Println(kmpMatch(<span class=\"string\">\"BBC ABCDAB ABCDABCDABDE\"</span>, <span class=\"string\">\"CDABCDABD\"</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3\" class=\"outline-2\">\n<h2 id=\"sec-3\"><a id=\"ID-1fa512d6-32e1-4be1-a96f-f25124bbbfef\" name=\"ID-1fa512d6-32e1-4be1-a96f-f25124bbbfef\"></a><span class=\"section-number-2\">3</span> <span class=\"done DONE\">DONE</span> 链表</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-26 Mon 17:27]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-3-1\" class=\"outline-3\">\n<h3 id=\"sec-3-1\"><a id=\"ID-2ed40ed9-8f8a-4304-9e64-0dd785f24c4b\" name=\"ID-2ed40ed9-8f8a-4304-9e64-0dd785f24c4b\"></a><span class=\"section-number-3\">3.1</span> <span class=\"done DONE\">DONE</span> 单向链表</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-22 Thu 22:19]</span></span>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ListNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Val  <span class=\"typename\">int</span></span><br><span class=\"line\">  Next *ListNode</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">struct</span> ListNode {</span><br><span class=\"line\">  <span class=\"keyword\">int</span> val;</span><br><span class=\"line\">  ListNode *next;</span><br><span class=\"line\">  ListNode(<span class=\"keyword\">int</span> x) : val(x), next(<span class=\"literal\">NULL</span>) {}</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n</li>\n</ul>\n</div>\n\n<div id=\"outline-container-sec-3-1-1\" class=\"outline-4\">\n<h4 id=\"sec-3-1-1\"><a id=\"ID-6460d9c8-c5ac-4c70-a8ec-fe6ec7c05e30\" name=\"ID-6460d9c8-c5ac-4c70-a8ec-fe6ec7c05e30\"></a><span class=\"section-number-4\">3.1.1</span> <span class=\"done DONE\">DONE</span> Rotate List</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"FIXED\"      <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-22 Thu 15:04]</span></span>\n</li>\n<li>State \"FIXED\"      from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-22 Thu 15:04]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> rotateRight(head *ListNode, k <span class=\"typename\">int</span>) *ListNode {</span><br><span class=\"line\">  size := <span class=\"number\">0</span></span><br><span class=\"line\">  curr := head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    curr = curr.Next</span><br><span class=\"line\">    size += <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> size == <span class=\"number\">0</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  k = k % size</span><br><span class=\"line\">  <span class=\"keyword\">if</span> k == <span class=\"number\">0</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  index := size - k - <span class=\"number\">1</span></span><br><span class=\"line\">  curr = head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> index &gt; <span class=\"number\">0</span> {</span><br><span class=\"line\">    curr = curr.Next</span><br><span class=\"line\">    index -= <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  nh := curr.Next</span><br><span class=\"line\">  curr.Next = <span class=\"constant\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">  curr = nh</span><br><span class=\"line\">  <span class=\"keyword\">for</span> curr.Next != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    curr = curr.Next</span><br><span class=\"line\">  }</span><br><span class=\"line\">  curr.Next = head</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> nh</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  head := &amp;ListNode{</span><br><span class=\"line\">    Val: <span class=\"number\">1</span>,</span><br><span class=\"line\">    Next: &amp;ListNode{</span><br><span class=\"line\">      Val: <span class=\"number\">2</span>,</span><br><span class=\"line\">      Next: &amp;ListNode{</span><br><span class=\"line\">\tVal: <span class=\"number\">3</span>,</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  head = rotateRight(head, <span class=\"number\">1</span>)</span><br><span class=\"line\">  curr:= head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    fmt.Println(curr.Val)</span><br><span class=\"line\">    curr = curr.Next</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-3-1-2\" class=\"outline-4\">\n<h4 id=\"sec-3-1-2\"><a id=\"ID-dfec5e77-9f96-4afd-9820-67f9ecfc8d7d\" name=\"ID-dfec5e77-9f96-4afd-9820-67f9ecfc8d7d\"></a><span class=\"section-number-4\">3.1.2</span> <span class=\"done DONE\">DONE</span> Reverse Linked List</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-2\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-22 Thu 16:18]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> reverseList(head *ListNode) *ListNode {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> head == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  dummyNode := &amp;ListNode{Next: head}</span><br><span class=\"line\">  pre := head</span><br><span class=\"line\">  curr := head.Next</span><br><span class=\"line\">  head.Next = <span class=\"constant\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    pre = curr</span><br><span class=\"line\">    curr = curr.Next</span><br><span class=\"line\"></span><br><span class=\"line\">    pre.Next = dummyNode.Next</span><br><span class=\"line\">    dummyNode.Next = pre</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dummyNode.Next</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-1-3\" class=\"outline-4\">\n<h4 id=\"sec-3-1-3\"><a id=\"ID-a6a59115-d408-4322-abe2-a2fdd36b2d6d\" name=\"ID-a6a59115-d408-4322-abe2-a2fdd36b2d6d\"></a><span class=\"section-number-4\">3.1.3</span> <span class=\"done DONE\">DONE</span> Delete Node in a Linked List</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-3\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-22 Thu 16:52]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">deleteNode</span><span class=\"params\">(ListNode* node)</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> next = node-&gt;next;</span><br><span class=\"line\">    *node = *next;</span><br><span class=\"line\">    <span class=\"keyword\">delete</span> next;</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-1-4\" class=\"outline-4\">\n<h4 id=\"sec-3-1-4\"><a id=\"ID-9712073b-7232-4599-8acc-68b7b308ba84\" name=\"ID-9712073b-7232-4599-8acc-68b7b308ba84\"></a><span class=\"section-number-4\">3.1.4</span> <span class=\"done DONE\">DONE</span> Merge Two Sorted Lists</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-4\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-22 Thu 17:40]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {</span><br><span class=\"line\">  dummyNode := &amp;ListNode{}</span><br><span class=\"line\">  dummy := dummyNode</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> l1 != <span class=\"constant\">nil</span> &amp;&amp; l2 != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l1.Val &lt; l2.Val {</span><br><span class=\"line\">      dummy.Next = l1</span><br><span class=\"line\">      l1 = l1.Next</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      dummy.Next = l2</span><br><span class=\"line\">      l2 = l2.Next</span><br><span class=\"line\">    }</span><br><span class=\"line\">    dummy = dummy.Next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> l1 != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.Next = l1</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> l2 != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.Next = l2</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dummyNode.Next</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-1-5\" class=\"outline-4\">\n<h4 id=\"sec-3-1-5\"><a id=\"ID-c369f30e-19f4-4254-9d70-48093d3eca2e\" name=\"ID-c369f30e-19f4-4254-9d70-48093d3eca2e\"></a><span class=\"section-number-4\">3.1.5</span> <span class=\"done DONE\">DONE</span> Linked List Cycle</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-5\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-22 Thu 18:03]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">hasCycle</span><span class=\"params\">(ListNode *head)</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> lp = head-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> rp = head-&gt;next-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lp != <span class=\"literal\">NULL</span> &amp;&amp; rp != <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (lp == rp) {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">      }</span><br><span class=\"line\"></span><br><span class=\"line\">      lp = lp-&gt;next;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rp-&gt;next == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">      }</span><br><span class=\"line\">      rp = rp-&gt;next-&gt;next;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-1-6\" class=\"outline-4\">\n<h4 id=\"sec-3-1-6\"><a id=\"ID-48167069-ac53-4f9e-beba-cd3c9bade788\" name=\"ID-48167069-ac53-4f9e-beba-cd3c9bade788\"></a><span class=\"section-number-4\">3.1.6</span> <span class=\"done DONE\">DONE</span> Linked List Cycle II</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-6\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-22 Thu 22:18]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">class</span> Solution {</span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">  <span class=\"function\">ListNode *<span class=\"title\">detectCycle</span><span class=\"params\">(ListNode *head)</span> </span>{</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (head == <span class=\"literal\">NULL</span> || head-&gt;next == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">auto</span> lp = head-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">auto</span> rp = head-&gt;next-&gt;next;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lp != <span class=\"literal\">NULL</span> &amp;&amp; rp != <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (lp == rp) {</span><br><span class=\"line\">\t<span class=\"keyword\">break</span>;</span><br><span class=\"line\">      }</span><br><span class=\"line\"></span><br><span class=\"line\">      lp = lp-&gt;next;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (rp-&gt;next == <span class=\"literal\">NULL</span>) {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">      }</span><br><span class=\"line\">      rp = rp-&gt;next-&gt;next;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (lp != rp) {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">int</span> cl = <span class=\"number\">1</span>;</span><br><span class=\"line\">    rp = rp-&gt;next;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lp != rp) {</span><br><span class=\"line\">      rp = rp-&gt;next;</span><br><span class=\"line\">      cl += <span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    lp = head;</span><br><span class=\"line\">    rp = head;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (cl &gt; <span class=\"number\">0</span>) {</span><br><span class=\"line\">      lp = lp-&gt;next;</span><br><span class=\"line\">      cl -= <span class=\"number\">1</span>;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (lp != rp) {</span><br><span class=\"line\">      lp = lp-&gt;next;</span><br><span class=\"line\">      rp = rp-&gt;next;</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> rp;</span><br><span class=\"line\">  }</span><br><span class=\"line\">};</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-1-7\" class=\"outline-4\">\n<h4 id=\"sec-3-1-7\"><a id=\"ID-5042c3e4-cd9e-4584-b278-af62aeda0e74\" name=\"ID-5042c3e4-cd9e-4584-b278-af62aeda0e74\"></a><span class=\"section-number-4\">3.1.7</span> <span class=\"done DONE\">DONE</span> 合并K个元素的有序链表</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-7\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-08 Sun 11:38]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"container/heap\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> ListNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Val  <span class=\"typename\">int</span></span><br><span class=\"line\">  Next *ListNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyMinHeap []*ListNode</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h MyMinHeap) Len() <span class=\"typename\">int</span>           { <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(h) }</span><br><span class=\"line\"><span class=\"keyword\">func</span> (h MyMinHeap) Less(i, j <span class=\"typename\">int</span>) <span class=\"typename\">bool</span> { <span class=\"keyword\">return</span> h[i].Val &lt; h[j].Val }</span><br><span class=\"line\"><span class=\"keyword\">func</span> (h MyMinHeap) Swap(i, j <span class=\"typename\">int</span>)      { h[i], h[j] = h[j], h[i] }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *MyMinHeap) Push(e <span class=\"keyword\">interface</span>{}) {</span><br><span class=\"line\">  *h = <span class=\"built_in\">append</span>(*h, e.(*ListNode))</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *MyMinHeap) Pop() <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  old := *h</span><br><span class=\"line\">  n := <span class=\"built_in\">len</span>(old)</span><br><span class=\"line\">  e := old[n-<span class=\"number\">1</span>]</span><br><span class=\"line\">  *h = old[<span class=\"number\">0</span> : n-<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> mergeKLists(lists []*ListNode) *ListNode {</span><br><span class=\"line\">  h := &amp;MyMinHeap{}</span><br><span class=\"line\">  head := &amp;ListNode{}</span><br><span class=\"line\">  dummyNode := head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(lists); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> lists[i] != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      heap.Push(h, lists[i])</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> h.Len() &gt; <span class=\"number\">0</span> {</span><br><span class=\"line\">    n := heap.Pop(h).(*ListNode)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> n.Next != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      heap.Push(h, n.Next)</span><br><span class=\"line\">    }</span><br><span class=\"line\">    dummyNode.Next = n</span><br><span class=\"line\">    dummyNode = dummyNode.Next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head.Next</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {</span><br><span class=\"line\">  dummyNode := &amp;ListNode{}</span><br><span class=\"line\">  dummy := dummyNode</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> l1 != <span class=\"constant\">nil</span> &amp;&amp; l2 != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l1.Val &lt; l2.Val {</span><br><span class=\"line\">      dummy.Next = l1</span><br><span class=\"line\">      l1 = l1.Next</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      dummy.Next = l2</span><br><span class=\"line\">      l2 = l2.Next</span><br><span class=\"line\">    }</span><br><span class=\"line\">    dummy = dummy.Next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> l1 != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.Next = l1</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> l2 != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.Next = l2</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dummyNode.Next</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> mergeKLists(lists []*ListNode) *ListNode {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(lists) &lt; <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  head := lists[<span class=\"number\">0</span>]</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">len</span>(lists); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    head = mergeTwoLists(head, lists[i])</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> head</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> mergeTwoLists(l1 *ListNode, l2 *ListNode) *ListNode {</span><br><span class=\"line\">  dummyNode := &amp;ListNode{}</span><br><span class=\"line\">  dummy := dummyNode</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> l1 != <span class=\"constant\">nil</span> &amp;&amp; l2 != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l1.Val &lt; l2.Val {</span><br><span class=\"line\">      dummy.Next = l1</span><br><span class=\"line\">      l1 = l1.Next</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      dummy.Next = l2</span><br><span class=\"line\">      l2 = l2.Next</span><br><span class=\"line\">    }</span><br><span class=\"line\">    dummy = dummy.Next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> l1 != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.Next = l1</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> l2 != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.Next = l2</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dummyNode.Next</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> mergeKLists(lists []*ListNode) *ListNode {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(lists) == <span class=\"number\">2</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> mergeTwoLists(lists[<span class=\"number\">0</span>], lists[<span class=\"number\">1</span>])</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(lists) == <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> lists[<span class=\"number\">0</span>]</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> <span class=\"built_in\">len</span>(lists) == <span class=\"number\">0</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  ll := mergeKLists(lists[:<span class=\"built_in\">len</span>(lists)/<span class=\"number\">2</span>])</span><br><span class=\"line\">  rl := mergeKLists(lists[<span class=\"built_in\">len</span>(lists)/<span class=\"number\">2</span>:])</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> mergeTwoLists(ll, rl)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-1-8\" class=\"outline-4\">\n<h4 id=\"sec-3-1-8\"><a id=\"ID-7816c700-36ab-4613-a841-578c26fce8b4\" name=\"ID-7816c700-36ab-4613-a841-578c26fce8b4\"></a><span class=\"section-number-4\">3.1.8</span> <span class=\"done DONE\">DONE</span> 每k个一组翻转链表</h4>\n<div class=\"outline-text-4\" id=\"text-3-1-8\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-08 Sun 14:49]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> reverseKGroup(head *ListNode, k <span class=\"typename\">int</span>) *ListNode {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> head == <span class=\"constant\">nil</span> || k &lt; <span class=\"number\">2</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  dummyNode := &amp;ListNode{Next: head}</span><br><span class=\"line\">  kg_dummyNode := dummyNode</span><br><span class=\"line\">  kg_pre := kg_dummyNode.Next</span><br><span class=\"line\">  kg_curr := kg_pre.Next</span><br><span class=\"line\">  kg_tail := kg_pre</span><br><span class=\"line\"></span><br><span class=\"line\">  cn := k - <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> kg_curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    kg_pre = kg_curr</span><br><span class=\"line\">    kg_curr = kg_curr.Next</span><br><span class=\"line\"></span><br><span class=\"line\">    kg_pre.Next = kg_dummyNode.Next</span><br><span class=\"line\">    kg_dummyNode.Next = kg_pre</span><br><span class=\"line\">    cn -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cn == <span class=\"number\">0</span> &amp;&amp; kg_curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      kg_tail.Next = kg_curr</span><br><span class=\"line\">      kg_dummyNode = kg_tail</span><br><span class=\"line\">      kg_pre = kg_curr</span><br><span class=\"line\">      kg_curr = kg_pre.Next</span><br><span class=\"line\">      kg_tail = kg_pre</span><br><span class=\"line\">      cn = k - <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  kg_tail.Next = <span class=\"constant\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> cn &gt; <span class=\"number\">0</span> {</span><br><span class=\"line\">    pre := kg_dummyNode.Next</span><br><span class=\"line\">    curr := pre.Next</span><br><span class=\"line\">    pre.Next = <span class=\"constant\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      pre = curr</span><br><span class=\"line\">      curr = curr.Next</span><br><span class=\"line\"></span><br><span class=\"line\">      pre.Next = kg_dummyNode.Next</span><br><span class=\"line\">      kg_dummyNode.Next = pre</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dummyNode.Next</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-3-2\" class=\"outline-3\">\n<h3 id=\"sec-3-2\"><a id=\"ID-f52e973b-f9a1-4cc3-8c98-d3290356d723\" name=\"ID-f52e973b-f9a1-4cc3-8c98-d3290356d723\"></a><span class=\"section-number-3\">3.2</span> <span class=\"done DONE\">DONE</span> 双向链表</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-26 Mon 17:27]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-3-2-1\" class=\"outline-4\">\n<h4 id=\"sec-3-2-1\"><a id=\"ID-8e6063ce-b5e9-42b1-95df-e9fb97f9f6b6\" name=\"ID-8e6063ce-b5e9-42b1-95df-e9fb97f9f6b6\"></a><span class=\"section-number-4\">3.2.1</span> <span class=\"done DONE\">DONE</span> All O`one Data Structure</h4>\n<div class=\"outline-text-4\" id=\"text-3-2-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-26 Mon 17:26]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Ele <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Key     <span class=\"typename\">string</span></span><br><span class=\"line\">  Counter <span class=\"typename\">int</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> AllOne <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  EleM <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]*list.Element</span><br><span class=\"line\">  Lst  *list.List</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> Constructor() AllOne {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> AllOne{</span><br><span class=\"line\">    Lst:  list.New(),</span><br><span class=\"line\">    EleM: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]*list.Element),</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Inserts a new key &lt;Key&gt; with value 1. Or increments an existing key by 1. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *AllOne) Inc(key <span class=\"typename\">string</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> e, ok := this.EleM[key]; ok {</span><br><span class=\"line\">    e.Value.(*Ele).Counter += <span class=\"number\">1</span></span><br><span class=\"line\">    next := e</span><br><span class=\"line\">    <span class=\"keyword\">for</span> {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> next == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">      <span class=\"keyword\">if</span> next.Value.(*Ele).Counter &gt; e.Value.(*Ele).Counter {</span><br><span class=\"line\">\t<span class=\"keyword\">break</span></span><br><span class=\"line\">      } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">\tnext = next.Next()</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> next == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      this.Lst.MoveToBack(e)</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      this.Lst.MoveBefore(e, next)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    ele := &amp;Ele{</span><br><span class=\"line\">      Key:     key,</span><br><span class=\"line\">      Counter: <span class=\"number\">1</span>,</span><br><span class=\"line\">    }</span><br><span class=\"line\">    e := this.Lst.PushFront(ele)</span><br><span class=\"line\">    this.EleM[key] = e</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Decrements an existing key by 1. If Key's value is 1, remove it from the data structure. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *AllOne) Dec(key <span class=\"typename\">string</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> e, ok := this.EleM[key]; ok {</span><br><span class=\"line\">    ele := e.Value.(*Ele)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ele.Counter == <span class=\"number\">1</span> {</span><br><span class=\"line\">      this.Lst.Remove(e)</span><br><span class=\"line\">      <span class=\"built_in\">delete</span>(this.EleM, key)</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      ele.Counter -= <span class=\"number\">1</span></span><br><span class=\"line\">      prev := e</span><br><span class=\"line\">      <span class=\"keyword\">for</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> prev == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span></span><br><span class=\"line\">\t}</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> prev.Value.(*Ele).Counter &lt; ele.Counter {</span><br><span class=\"line\">\t  <span class=\"keyword\">break</span></span><br><span class=\"line\">\t} <span class=\"keyword\">else</span> {</span><br><span class=\"line\">\t  prev = prev.Prev()</span><br><span class=\"line\">\t}</span><br><span class=\"line\">      }</span><br><span class=\"line\">      <span class=\"keyword\">if</span> prev == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">\tthis.Lst.MoveToFront(e)</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">\"prev: \"</span>, prev.Value)</span><br><span class=\"line\">\tthis.Lst.MoveAfter(e, prev)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Returns one of the keys with maximal value. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *AllOne) GetMaxKey() <span class=\"typename\">string</span> {</span><br><span class=\"line\">  tail := this.Lst.Back()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> tail != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> tail.Value.(*Ele).Key</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Returns one of the keys with Minimal value. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *AllOne) GetMinKey() <span class=\"typename\">string</span> {</span><br><span class=\"line\">  head := this.Lst.Front()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> head != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> head.Value.(*Ele).Key</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">\"\"</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *AllOne) Debug() {</span><br><span class=\"line\">  fmt.Println(this.EleM)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> e := this.Lst.Front(); e != <span class=\"constant\">nil</span>; e = e.Next() {</span><br><span class=\"line\">    fmt.Println(e.Value)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  ao := Constructor()</span><br><span class=\"line\">  ao.Inc(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">  ao.Inc(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">  ao.Debug()</span><br><span class=\"line\">  ao.Inc(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">  ao.Debug()</span><br><span class=\"line\">  ao.Inc(<span class=\"string\">\"b\"</span>)</span><br><span class=\"line\">  ao.Debug()</span><br><span class=\"line\">  ao.Inc(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">  ao.Debug()</span><br><span class=\"line\">  ao.Inc(<span class=\"string\">\"c\"</span>)</span><br><span class=\"line\">  ao.Dec(<span class=\"string\">\"c\"</span>)</span><br><span class=\"line\">  ao.Dec(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">  ao.Dec(<span class=\"string\">\"a\"</span>)</span><br><span class=\"line\">  ao.Debug()</span><br><span class=\"line\">  fmt.Println(ao.GetMaxKey())</span><br><span class=\"line\">  fmt.Println(ao.GetMinKey())</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4\" class=\"outline-2\">\n<h2 id=\"sec-4\"><a id=\"ID-7173f1db-4122-4acc-bb0b-96cc5921d400\" name=\"ID-7173f1db-4122-4acc-bb0b-96cc5921d400\"></a><span class=\"section-number-2\">4</span> <span class=\"done DONE\">DONE</span> LIFO 栈</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 22:45]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-4-1\" class=\"outline-3\">\n<h3 id=\"sec-4-1\"><a id=\"ID-d854a671-f28a-42a5-89b6-2dc1279f765d\" name=\"ID-d854a671-f28a-42a5-89b6-2dc1279f765d\"></a><span class=\"section-number-3\">4.1</span> <span class=\"done DONE\">DONE</span> 实现</h3>\n<div class=\"outline-text-3\" id=\"text-4-1\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from              <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 17:21]</span></span>\n</li>\n</ul>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Stack <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  lst *list.List</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> New() *Stack {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Stack{</span><br><span class=\"line\">    lst: list.New(),</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (s *Stack) Len() <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.lst.Len()</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (s *Stack) Empty() <span class=\"typename\">bool</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> s.lst.Len() == <span class=\"number\">0</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (s *Stack) Push(v <span class=\"keyword\">interface</span>{}) {</span><br><span class=\"line\">  s.lst.PushBack(v)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (s *Stack) Pop() <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  back := s.lst.Back()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> back != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> s.lst.Remove(back)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (s *Stack) Top() <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  back := s.lst.Back()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> back != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> back.Value</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  s := New()</span><br><span class=\"line\">  s.Push(<span class=\"number\">1</span>)</span><br><span class=\"line\">  s.Push(<span class=\"number\">2</span>)</span><br><span class=\"line\">  s.Push(<span class=\"number\">3</span>)</span><br><span class=\"line\">  fmt.Println(s.Top())</span><br><span class=\"line\">  fmt.Println(s.Pop())</span><br><span class=\"line\">  fmt.Println(s.Top())</span><br><span class=\"line\">  fmt.Println(s.Pop())</span><br><span class=\"line\">  fmt.Println(s.Top())</span><br><span class=\"line\">  fmt.Println(s.Pop())</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-4-2\" class=\"outline-3\">\n<h3 id=\"sec-4-2\"><a id=\"ID-dc103152-6d3b-4127-a129-c0acb781122a\" name=\"ID-dc103152-6d3b-4127-a129-c0acb781122a\"></a><span class=\"section-number-3\">4.2</span> <span class=\"done DONE\">DONE</span> 应用</h3>\n<div class=\"outline-text-3\" id=\"text-4-2\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 22:45]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-4-2-1\" class=\"outline-4\">\n<h4 id=\"sec-4-2-1\"><a id=\"ID-675abd4f-98ee-494e-9186-015202f5ec4b\" name=\"ID-675abd4f-98ee-494e-9186-015202f5ec4b\"></a><span class=\"section-number-4\">4.2.1</span> <span class=\"done DONE\">DONE</span> Implement Queue using Stacks</h4>\n<div class=\"outline-text-4\" id=\"text-4-2-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 22:44]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyQueue <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  ss *Stack</span><br><span class=\"line\">  hs *Stack</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> Constructor() MyQueue {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> MyQueue{</span><br><span class=\"line\">    ss: New(),</span><br><span class=\"line\">    hs: New(),</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Push element x to the back of queue. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MyQueue) Push(x <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> !this.ss.Empty() {</span><br><span class=\"line\">    this.hs.Push(this.ss.Pop())</span><br><span class=\"line\">  }</span><br><span class=\"line\">  this.ss.Push(x)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> !this.hs.Empty() {</span><br><span class=\"line\">    this.ss.Push(this.hs.Pop())</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Removes the element from in front of queue and returns that element. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MyQueue) Pop() <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> this.ss.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Get the front element. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MyQueue) Peek() <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> this.ss.Top().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Returns whether the queue is empty. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MyQueue) Empty() <span class=\"typename\">bool</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> this.ss.Empty()</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  q := Constructor()</span><br><span class=\"line\">  q.Push(<span class=\"number\">1</span>)</span><br><span class=\"line\">  q.Push(<span class=\"number\">2</span>)</span><br><span class=\"line\">  q.Push(<span class=\"number\">3</span>)</span><br><span class=\"line\">  fmt.Println(q.Peek())</span><br><span class=\"line\">  fmt.Println(q.Pop())</span><br><span class=\"line\">  fmt.Println(q.Peek())</span><br><span class=\"line\">  fmt.Println(q.Pop())</span><br><span class=\"line\">  q.Push(<span class=\"number\">4</span>)</span><br><span class=\"line\">  fmt.Println(q.Peek())</span><br><span class=\"line\">  fmt.Println(q.Pop())</span><br><span class=\"line\">  fmt.Println(q.Peek())</span><br><span class=\"line\">  fmt.Println(q.Pop())</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5\" class=\"outline-2\">\n<h2 id=\"sec-5\"><a id=\"ID-49421bb3-7812-4324-9668-16156375e0ae\" name=\"ID-49421bb3-7812-4324-9668-16156375e0ae\"></a><span class=\"section-number-2\">5</span> <span class=\"done DONE\">DONE</span> FIFO 队列</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n</div>\n<div id=\"outline-container-sec-5-1\" class=\"outline-3\">\n<h3 id=\"sec-5-1\"><a id=\"ID-a64526cf-3a7f-4d63-8443-fb0cd97b4f5c\" name=\"ID-a64526cf-3a7f-4d63-8443-fb0cd97b4f5c\"></a><span class=\"section-number-3\">5.1</span> <span class=\"done DONE\">DONE</span> 实现</h3>\n<div class=\"outline-text-3\" id=\"text-5-1\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from              <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 17:22]</span></span>\n</li>\n</ul>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Queue <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  lst *list.List</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> New() *Queue {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;Queue{</span><br><span class=\"line\">    lst: list.New(),</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (q *Queue) Len() <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> q.lst.Len()</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (q *Queue) Empty() <span class=\"typename\">bool</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> q.lst.Len() == <span class=\"number\">0</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (q *Queue) Front() <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  front := q.lst.Front()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> front != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> front.Value</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (q *Queue) Peek() <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> q.Front()</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (q *Queue) Push(v <span class=\"keyword\">interface</span>{}) {</span><br><span class=\"line\">  q.lst.PushBack(v)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (q Queue) Back() <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  back := q.lst.Back()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> back != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> back.Value</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (q *Queue) Pop() <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  front := q.lst.Front()</span><br><span class=\"line\">  <span class=\"keyword\">if</span> front != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> q.lst.Remove(front)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-5-2\" class=\"outline-3\">\n<h3 id=\"sec-5-2\"><a id=\"ID-dc103152-6d3b-4127-a129-c0acb781122a\" name=\"ID-dc103152-6d3b-4127-a129-c0acb781122a\"></a><span class=\"section-number-3\">5.2</span> <span class=\"done DONE\">DONE</span> 应用</h3>\n<div class=\"outline-text-3\" id=\"text-5-2\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 22:44]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-5-2-1\" class=\"outline-4\">\n<h4 id=\"sec-5-2-1\"><a id=\"ID-0eb27b57-8093-48af-a64a-3d10bab9e423\" name=\"ID-0eb27b57-8093-48af-a64a-3d10bab9e423\"></a><span class=\"section-number-4\">5.2.1</span> <span class=\"done DONE\">DONE</span> Implement Stack using Queues</h4>\n<div class=\"outline-text-4\" id=\"text-5-2-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-27 Tue 22:44]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyStack <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  q  *Queue</span><br><span class=\"line\">  hq *Queue</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Initialize your data structure here. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> Constructor() MyStack {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> MyStack{</span><br><span class=\"line\">    q:  New(),</span><br><span class=\"line\">    hq: New(),</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Push element x onto stack. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MyStack) Push(x <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> !this.q.Empty() {</span><br><span class=\"line\">    this.hq.Push(this.q.Pop())</span><br><span class=\"line\">  }</span><br><span class=\"line\">  this.q.Push(x)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> !this.hq.Empty() {</span><br><span class=\"line\">    this.q.Push(this.hq.Pop())</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Removes the element on top of the stack and returns that element. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MyStack) Pop() <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> this.q.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Get the top element. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MyStack) Top() <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> this.q.Peek().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** Returns whether the stack is empty. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MyStack) Empty() <span class=\"typename\">bool</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> this.q.Empty()</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  s := Constructor()</span><br><span class=\"line\">  s.Push(<span class=\"number\">1</span>)</span><br><span class=\"line\">  s.Push(<span class=\"number\">2</span>)</span><br><span class=\"line\">  s.Push(<span class=\"number\">3</span>)</span><br><span class=\"line\">  fmt.Println(s.Top())</span><br><span class=\"line\">  fmt.Println(s.Pop())</span><br><span class=\"line\">  fmt.Println(s.Top())</span><br><span class=\"line\">  fmt.Println(s.Pop())</span><br><span class=\"line\">  s.Push(<span class=\"number\">4</span>)</span><br><span class=\"line\">  fmt.Println(s.Top())</span><br><span class=\"line\">  fmt.Println(s.Pop())</span><br><span class=\"line\">  fmt.Println(s.Top())</span><br><span class=\"line\">  fmt.Println(s.Pop())</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-6\" class=\"outline-2\">\n<h2 id=\"sec-6\"><a id=\"ID-e88b6d2f-11a7-4550-be3d-20a650bb3661\" name=\"ID-e88b6d2f-11a7-4550-be3d-20a650bb3661\"></a><span class=\"section-number-2\">6</span> <span class=\"done DONE\">DONE</span> 二叉堆</h2>\n<div class=\"outline-text-2\" id=\"text-6\">\n</div>\n\n<div id=\"outline-container-sec-6-1\" class=\"outline-3\">\n<h3 id=\"sec-6-1\"><a id=\"ID-a6d3e49d-aad2-4b27-adc7-2a4e730c08bc\" name=\"ID-a6d3e49d-aad2-4b27-adc7-2a4e730c08bc\"></a><span class=\"section-number-3\">6.1</span> <span class=\"done DONE\">DONE</span> 实现堆</h3>\n<div class=\"outline-text-3\" id=\"text-6-1\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-23 Fri 18:10]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> LessFunc <span class=\"keyword\">func</span>(<span class=\"typename\">int</span>, <span class=\"typename\">int</span>) <span class=\"typename\">bool</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Heap <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  nums     []<span class=\"typename\">int</span></span><br><span class=\"line\">  size     <span class=\"typename\">int</span></span><br><span class=\"line\">  capacity <span class=\"typename\">int</span></span><br><span class=\"line\">  lessFunc LessFunc</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> parent(i <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (i - <span class=\"number\">1</span>) / <span class=\"number\">2</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> left(i <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span>*i + <span class=\"number\">1</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> right(i <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"number\">2</span>*i + <span class=\"number\">2</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> NewHeap(nums []<span class=\"typename\">int</span>, lessFunc LessFunc) *Heap {</span><br><span class=\"line\">  cnums := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(nums))</span><br><span class=\"line\">  <span class=\"built_in\">copy</span>(cnums, nums)</span><br><span class=\"line\">  h := &amp;Heap{</span><br><span class=\"line\">    nums:     cnums,</span><br><span class=\"line\">    size:     <span class=\"built_in\">len</span>(nums),</span><br><span class=\"line\">    capacity: <span class=\"built_in\">len</span>(nums),</span><br><span class=\"line\">    lessFunc: lessFunc,</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(nums) / <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i -= <span class=\"number\">1</span> {</span><br><span class=\"line\">    h.down(i, <span class=\"built_in\">len</span>(nums)-<span class=\"number\">1</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> h</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *Heap) down(start, end <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  p := start</span><br><span class=\"line\">  l := left(p)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> l &gt; end {</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> l &lt; end &amp;&amp; h.lessFunc(h.nums[l], h.nums[l+<span class=\"number\">1</span>]) {</span><br><span class=\"line\">      l += <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> !h.lessFunc(h.nums[p], h.nums[l]) {</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      h.nums[l], h.nums[p] = h.nums[p], h.nums[l]</span><br><span class=\"line\">      p = l</span><br><span class=\"line\">      l = left(p)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *Heap) up(start, end <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  p := parent(end)</span><br><span class=\"line\">  c := end</span><br><span class=\"line\">  <span class=\"keyword\">for</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> p &lt; start {</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> !h.lessFunc(h.nums[p], h.nums[c]) {</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      h.nums[c], h.nums[p] = h.nums[p], h.nums[c]</span><br><span class=\"line\">      c = p</span><br><span class=\"line\">      p = parent(p)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *Heap) Push(num <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> h.size+<span class=\"number\">1</span> &gt; h.capacity {</span><br><span class=\"line\">    h.capacity *= <span class=\"number\">2</span></span><br><span class=\"line\">    cnums := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, h.capacity)</span><br><span class=\"line\">    <span class=\"built_in\">copy</span>(cnums, h.nums)</span><br><span class=\"line\">    h.nums = cnums</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  h.nums[h.size] = num</span><br><span class=\"line\">  h.size += <span class=\"number\">1</span></span><br><span class=\"line\">  h.up(<span class=\"number\">0</span>, h.size-<span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *Heap) Pop() (<span class=\"typename\">int</span>, error) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> h.size &lt; <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"number\">0</span>, errors.New(<span class=\"string\">\"empty\"</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  h.size -= <span class=\"number\">1</span></span><br><span class=\"line\">  h.nums[h.size], h.nums[<span class=\"number\">0</span>] = h.nums[<span class=\"number\">0</span>], h.nums[h.size]</span><br><span class=\"line\">  h.down(<span class=\"number\">0</span>, h.size-<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h.nums[h.size], <span class=\"constant\">nil</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"errors\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  nums := []<span class=\"typename\">int</span>{<span class=\"number\">2</span>, <span class=\"number\">4</span>, <span class=\"number\">6</span>, <span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>, <span class=\"number\">1</span>, <span class=\"number\">10</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>}</span><br><span class=\"line\">  h := NewHeap(nums, <span class=\"keyword\">func</span>(a, b <span class=\"typename\">int</span>) <span class=\"typename\">bool</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &lt; b {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"constant\">true</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"constant\">false</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  })</span><br><span class=\"line\">  h.Log()</span><br><span class=\"line\">  dn, _ := h.Del()</span><br><span class=\"line\">  fmt.Println(dn)</span><br><span class=\"line\">  h.Log()</span><br><span class=\"line\">  h.Insert(<span class=\"number\">11</span>)</span><br><span class=\"line\">  h.Log()</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-6-2\" class=\"outline-3\">\n<h3 id=\"sec-6-2\"><a id=\"ID-8175ba89-3259-4e11-9603-e4301bdb4d84\" name=\"ID-8175ba89-3259-4e11-9603-e4301bdb4d84\"></a><span class=\"section-number-3\">6.2</span> <span class=\"done DONE\">DONE</span> 堆的应用</h3>\n<div class=\"outline-text-3\" id=\"text-6-2\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-26 Mon 14:07]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-6-2-1\" class=\"outline-4\">\n<h4 id=\"sec-6-2-1\"><a id=\"ID-97a15611-fb97-4ebb-b605-5f79d0339786\" name=\"ID-97a15611-fb97-4ebb-b605-5f79d0339786\"></a><span class=\"section-number-4\">6.2.1</span> <span class=\"done DONE\">DONE</span> Find Median from Data Stream</h4>\n<div class=\"outline-text-4\" id=\"text-6-2-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-26 Mon 14:07]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"container/heap\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyMaxHeap []<span class=\"typename\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h MyMaxHeap) Len() <span class=\"typename\">int</span>           { <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(h) }</span><br><span class=\"line\"><span class=\"keyword\">func</span> (h MyMaxHeap) Less(i, j <span class=\"typename\">int</span>) <span class=\"typename\">bool</span> { <span class=\"keyword\">return</span> h[i] &gt; h[j] }</span><br><span class=\"line\"><span class=\"keyword\">func</span> (h MyMaxHeap) Swap(i, j <span class=\"typename\">int</span>)      { h[i], h[j] = h[j], h[i] }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *MyMaxHeap) Push(e <span class=\"keyword\">interface</span>{}) {</span><br><span class=\"line\">  *h = <span class=\"built_in\">append</span>(*h, e.(<span class=\"typename\">int</span>))</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *MyMaxHeap) Pop() <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  old := *h</span><br><span class=\"line\">  n := <span class=\"built_in\">len</span>(old)</span><br><span class=\"line\">  e := old[n-<span class=\"number\">1</span>]</span><br><span class=\"line\">  *h = old[<span class=\"number\">0</span> : n-<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MyMinHeap []<span class=\"typename\">int</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h MyMinHeap) Len() <span class=\"typename\">int</span>           { <span class=\"keyword\">return</span> <span class=\"built_in\">len</span>(h) }</span><br><span class=\"line\"><span class=\"keyword\">func</span> (h MyMinHeap) Less(i, j <span class=\"typename\">int</span>) <span class=\"typename\">bool</span> { <span class=\"keyword\">return</span> h[i] &lt; h[j] }</span><br><span class=\"line\"><span class=\"keyword\">func</span> (h MyMinHeap) Swap(i, j <span class=\"typename\">int</span>)      { h[i], h[j] = h[j], h[i] }</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *MyMinHeap) Push(e <span class=\"keyword\">interface</span>{}) {</span><br><span class=\"line\">  *h = <span class=\"built_in\">append</span>(*h, e.(<span class=\"typename\">int</span>))</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (h *MyMinHeap) Pop() <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  old := *h</span><br><span class=\"line\">  n := <span class=\"built_in\">len</span>(old)</span><br><span class=\"line\">  e := old[n-<span class=\"number\">1</span>]</span><br><span class=\"line\">  *h = old[<span class=\"number\">0</span> : n-<span class=\"number\">1</span>]</span><br><span class=\"line\">  <span class=\"keyword\">return</span> e</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> MedianFinder <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  LH    *MyMaxHeap</span><br><span class=\"line\">  RH    *MyMinHeap</span><br><span class=\"line\">  Lsize <span class=\"typename\">int</span></span><br><span class=\"line\">  Rsize <span class=\"typename\">int</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/** initialize your data structure here. */</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> Constructor() MedianFinder {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> MedianFinder{</span><br><span class=\"line\">    LH: &amp;MyMaxHeap{},</span><br><span class=\"line\">    RH: &amp;MyMinHeap{},</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MedianFinder) AddNum(num <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Lsize == <span class=\"number\">0</span> {</span><br><span class=\"line\">    heap.Push(this.LH, num)</span><br><span class=\"line\">    this.Lsize += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  lnum := heap.Pop(this.LH).(<span class=\"typename\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Rsize == <span class=\"number\">0</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> num &lt; lnum {</span><br><span class=\"line\">      lnum, num = num, lnum</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    heap.Push(this.LH, lnum)</span><br><span class=\"line\">    heap.Push(this.RH, num)</span><br><span class=\"line\">    this.Rsize += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  rnum := heap.Pop(this.RH).(<span class=\"typename\">int</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> num &lt; lnum {</span><br><span class=\"line\">    lnum, num = num, lnum</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> rnum &lt; num {</span><br><span class=\"line\">    num, rnum = rnum, num</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Lsize &lt; this.Rsize {</span><br><span class=\"line\">    heap.Push(this.LH, lnum)</span><br><span class=\"line\">    heap.Push(this.LH, num)</span><br><span class=\"line\">    heap.Push(this.RH, rnum)</span><br><span class=\"line\">    this.Lsize += <span class=\"number\">1</span></span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    heap.Push(this.LH, lnum)</span><br><span class=\"line\">    heap.Push(this.RH, num)</span><br><span class=\"line\">    heap.Push(this.RH, rnum)</span><br><span class=\"line\">    this.Rsize += <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *MedianFinder) FindMedian() <span class=\"typename\">float64</span> {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Lsize == this.Rsize {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> this.Lsize == <span class=\"number\">0</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"number\">0.0</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> (<span class=\"typename\">float64</span>((*(this.LH))[<span class=\"number\">0</span>]) + <span class=\"typename\">float64</span>((*(this.RH))[<span class=\"number\">0</span>]))/<span class=\"number\">2.0</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Lsize &gt; this.Rsize {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"typename\">float64</span>((*this.LH)[<span class=\"number\">0</span>])</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"typename\">float64</span>((*this.RH)[<span class=\"number\">0</span>])</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  mf := Constructor()</span><br><span class=\"line\">  mf.AddNum(<span class=\"number\">1</span>)</span><br><span class=\"line\">  fmt.Println(mf.FindMedian())</span><br><span class=\"line\">  mf.AddNum(<span class=\"number\">2</span>)</span><br><span class=\"line\">  fmt.Println(mf.FindMedian())</span><br><span class=\"line\">  mf.AddNum(<span class=\"number\">3</span>)</span><br><span class=\"line\">  fmt.Println(mf.FindMedian())</span><br><span class=\"line\">  mf.AddNum(<span class=\"number\">4</span>)</span><br><span class=\"line\">  fmt.Println(mf.FindMedian())</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-7\" class=\"outline-2\">\n<h2 id=\"sec-7\"><a id=\"ID-86fe0d66-92df-4db7-8c7c-a1670f6dc06c\" name=\"ID-86fe0d66-92df-4db7-8c7c-a1670f6dc06c\"></a><span class=\"section-number-2\">7</span> <span class=\"done DONE\">DONE</span> 二项堆</h2>\n<div class=\"outline-text-2\" id=\"text-7\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> BinHeapNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Parent  *BinHeapNode</span><br><span class=\"line\">  Child   *BinHeapNode</span><br><span class=\"line\">  Sibling *BinHeapNode</span><br><span class=\"line\">  Key     <span class=\"typename\">int</span></span><br><span class=\"line\">  Degree  <span class=\"typename\">int</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> BinHeap <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Head *BinHeapNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> MakeBinHeap() *BinHeap {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;BinHeap{}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> BinHeapMinimum(h *BinHeap) *BinHeapNode {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y *BinHeapNode</span><br><span class=\"line\">  x := h.Head</span><br><span class=\"line\">  min := math.MaxInt32</span><br><span class=\"line\">  <span class=\"keyword\">for</span> x != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.Key &lt; min {</span><br><span class=\"line\">      min = x.Key</span><br><span class=\"line\">      y = x</span><br><span class=\"line\">    }</span><br><span class=\"line\">    x = x.Sibling</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> y</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> BinLink(y, z *BinHeapNode) {</span><br><span class=\"line\">  y.Parent = z</span><br><span class=\"line\">  y.Sibling = z.Child</span><br><span class=\"line\">  z.Child = y</span><br><span class=\"line\">  z.Degree += <span class=\"number\">1</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> BinHeapMerge(lh, rh *BinHeap) *BinHeap {</span><br><span class=\"line\">  dummyNode := &amp;BinHeapNode{}</span><br><span class=\"line\">  dummy := dummyNode</span><br><span class=\"line\">  ln, rn := lh.Head, rh.Head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> ln != <span class=\"constant\">nil</span> &amp;&amp; rn != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> ln.Degree &lt; rn.Degree {</span><br><span class=\"line\">      dummy.Sibling = ln</span><br><span class=\"line\">      ln = ln.Sibling</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      dummy.Sibling = rn</span><br><span class=\"line\">      rn = rn.Sibling</span><br><span class=\"line\">    }</span><br><span class=\"line\">    dummy = dummy.Sibling</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> ln != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.Sibling = ln</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> rn != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    dummy.Sibling = rn</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  h := MakeBinHeap()</span><br><span class=\"line\">  h.Head = dummyNode.Sibling</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> BinHeapUnion(lh, rh *BinHeap) *BinHeap {</span><br><span class=\"line\">  h := BinHeapMerge(lh, rh)</span><br><span class=\"line\">  lh.Head, rh.Head = <span class=\"constant\">nil</span>, <span class=\"constant\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> h == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> h</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> prev_x *BinHeapNode</span><br><span class=\"line\">  x := h.Head</span><br><span class=\"line\">  next_x := x.Sibling</span><br><span class=\"line\">  <span class=\"keyword\">for</span> next_x != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.Degree != next_x.Degree ||</span><br><span class=\"line\">      (next_x.Sibling != <span class=\"constant\">nil</span> &amp;&amp; next_x.Sibling.Degree == x.Degree) {</span><br><span class=\"line\">      prev_x = x</span><br><span class=\"line\">      x = next_x</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> x.Key &lt;= next_x.Key {</span><br><span class=\"line\">      x.Sibling = next_x.Sibling</span><br><span class=\"line\">      BinLink(next_x, x)</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> prev_x == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">\th.Head = next_x</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">\tprev_x.Sibling = next_x</span><br><span class=\"line\">      }</span><br><span class=\"line\">      BinLink(x, next_x)</span><br><span class=\"line\">      x = next_x</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    next_x = x.Sibling</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> BinHeapInsert(h *BinHeap, x *BinHeapNode)  *BinHeap {</span><br><span class=\"line\">  nh := MakeBinHeap()</span><br><span class=\"line\">  x.Parent, x.Child, x.Sibling = <span class=\"constant\">nil</span>, <span class=\"constant\">nil</span>, <span class=\"constant\">nil</span></span><br><span class=\"line\">  x.Degree = <span class=\"number\">0</span></span><br><span class=\"line\">  nh.Head = x</span><br><span class=\"line\">  h = BinHeapUnion(h, nh)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> BinHeapExtractMin(h *BinHeap) (*BinHeap, *BinHeapNode) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y, prev_y, prev_x *BinHeapNode</span><br><span class=\"line\">  x := h.Head</span><br><span class=\"line\">  min := math.MaxInt32</span><br><span class=\"line\">  <span class=\"keyword\">for</span> x != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> x.Key &lt; min {</span><br><span class=\"line\">      min = x.Key</span><br><span class=\"line\">      y = x</span><br><span class=\"line\">      prev_y = prev_x</span><br><span class=\"line\">    }</span><br><span class=\"line\">    prev_x = x</span><br><span class=\"line\">    x = x.Sibling</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> prev_y != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    prev_y.Sibling = y.Sibling</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    h.Head = y.Sibling</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  nh := MakeBinHeap()</span><br><span class=\"line\">  x = y.Child</span><br><span class=\"line\">  <span class=\"keyword\">for</span> x != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    z := x.Sibling</span><br><span class=\"line\">    x.Sibling = nh.Head</span><br><span class=\"line\">    nh.Head = x</span><br><span class=\"line\">    x = z</span><br><span class=\"line\">  }</span><br><span class=\"line\">  h = BinHeapUnion(h, nh)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> h, y</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> BinHeapDecrKey(h *BinHeap, x *BinHeapNode, k <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> k &gt; x.Key {</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"new key is greater than current key\"</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  x.Key = k</span><br><span class=\"line\">  y := x</span><br><span class=\"line\">  z := y.Parent</span><br><span class=\"line\">  <span class=\"keyword\">for</span> z != <span class=\"constant\">nil</span> &amp;&amp; y.Key &lt; z.Key {</span><br><span class=\"line\">    y.Key, z.Key = z.Key, y.Key</span><br><span class=\"line\">    y = z</span><br><span class=\"line\">    z = y.Parent</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> BinHeapDelete(h *BinHeap, x *BinHeapNode) {</span><br><span class=\"line\">  BinHeapDecrKey(h, x, math.MinInt32)</span><br><span class=\"line\">  BinHeapExtractMin(h)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"math\"</span></span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  lh := MakeBinHeap()</span><br><span class=\"line\">  x := &amp;BinHeapNode{</span><br><span class=\"line\">    Key: <span class=\"number\">1</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  y := &amp;BinHeapNode{</span><br><span class=\"line\">    Key: <span class=\"number\">2</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  z := &amp;BinHeapNode{</span><br><span class=\"line\">    Key: <span class=\"number\">3</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  w := &amp;BinHeapNode{</span><br><span class=\"line\">    Key: <span class=\"number\">4</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  lh = BinHeapInsert(lh, x)</span><br><span class=\"line\">  lh = BinHeapInsert(lh, y)</span><br><span class=\"line\">  lh = BinHeapInsert(lh, z)</span><br><span class=\"line\">  lh = BinHeapInsert(lh, w)</span><br><span class=\"line\">  lh,_ =BinHeapExtractMin(lh)</span><br><span class=\"line\">  fmt.Println(BinHeapMinimum(lh))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-8\" class=\"outline-2\">\n<h2 id=\"sec-8\"><a id=\"ID-f36628f6-985d-4248-9ae4-ca74a7cca477\" name=\"ID-f36628f6-985d-4248-9ae4-ca74a7cca477\"></a><span class=\"section-number-2\">8</span> <span class=\"done DONE\">DONE</span> 斐波那契堆</h2>\n<div class=\"outline-text-2\" id=\"text-8\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> FibHeapNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Parent *FibHeapNode</span><br><span class=\"line\">  Child  *FibHeapNode</span><br><span class=\"line\">  Left   *FibHeapNode</span><br><span class=\"line\">  Right  *FibHeapNode</span><br><span class=\"line\">  Key    <span class=\"typename\">int</span></span><br><span class=\"line\">  Degree <span class=\"typename\">int</span></span><br><span class=\"line\">  Mark   <span class=\"typename\">bool</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> FibHeap <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Min  *FibHeapNode</span><br><span class=\"line\">  Size <span class=\"typename\">int</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> MakeFibHeap() *FibHeap {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> &amp;FibHeap{}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> fibHeapNodeRemove(x *FibHeapNode) {</span><br><span class=\"line\">  x.Left.Right = x.Right</span><br><span class=\"line\">  x.Right.Left = x.Left</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> fibHeapNodeAdd(T, x *FibHeapNode) {</span><br><span class=\"line\">  T.Left.Right = x</span><br><span class=\"line\">  x.Left = T.Left</span><br><span class=\"line\">  x.Right = T</span><br><span class=\"line\">  T.Left = x</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> fibHeapNodeUnion(lhn, rhn *FibHeapNode) {</span><br><span class=\"line\">  lhn.Left.Right = rhn.Left</span><br><span class=\"line\">  rhn.Left.Left = lhn.Left</span><br><span class=\"line\">  lhn.Left = rhn</span><br><span class=\"line\">  rhn.Right = lhn</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> FibHeapInsert(h *FibHeap, x *FibHeapNode) {</span><br><span class=\"line\">  x.Degree = <span class=\"number\">0</span></span><br><span class=\"line\">  x.Mark = <span class=\"constant\">false</span></span><br><span class=\"line\">  x.Parent, x.Child = <span class=\"constant\">nil</span>, <span class=\"constant\">nil</span></span><br><span class=\"line\">  x.Left, x.Right = x, x</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> h.Min == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    h.Min = x</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    fibHeapNodeAdd(h.Min, x)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> h.Min.Key &gt; x.Key {</span><br><span class=\"line\">    h.Min = x</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  h.Size += <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> FibHeapMinimum(h *FibHeap) *FibHeapNode {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h.Min</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> FibHeapUnion(lh, rh *FibHeap) *FibHeap {</span><br><span class=\"line\">  h := MakeFibHeap()</span><br><span class=\"line\">  h.Min = lh.Min</span><br><span class=\"line\">  <span class=\"keyword\">if</span> h.Min != <span class=\"constant\">nil</span> &amp;&amp; rh.Min != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    fibHeapNodeUnion(h.Min, rh.Min)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> h.Min == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    h.Min = rh.Min</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> h.Min != <span class=\"constant\">nil</span> &amp;&amp; rh.Min != <span class=\"constant\">nil</span> &amp;&amp; h.Min.Key &gt; rh.Min.Key {</span><br><span class=\"line\">    h.Min = rh.Min</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  h.Size = lh.Size + rh.Size</span><br><span class=\"line\">  lh.Min, rh.Min = <span class=\"constant\">nil</span>, <span class=\"constant\">nil</span></span><br><span class=\"line\">  lh.Size, rh.Size = <span class=\"number\">0</span>, <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> h</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> FibHeapMinRemove(h *FibHeap) *FibHeapNode {</span><br><span class=\"line\">  min := h.Min</span><br><span class=\"line\">  <span class=\"keyword\">if</span> min == min.Right {</span><br><span class=\"line\">    h.Min = <span class=\"constant\">nil</span></span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    h.Min = min.Right</span><br><span class=\"line\">    fibHeapNodeRemove(min)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  min.Left, min.Right = min, min</span><br><span class=\"line\">  <span class=\"keyword\">return</span> min</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> FibHeapExtractMin(h *FibHeap) *FibHeapNode {</span><br><span class=\"line\">  z := h.Min</span><br><span class=\"line\">  <span class=\"keyword\">if</span> z == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> z</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  x := z.Child</span><br><span class=\"line\">  <span class=\"keyword\">if</span> x != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    y := x</span><br><span class=\"line\">    <span class=\"keyword\">for</span> y.Right != x {</span><br><span class=\"line\">      y.Parent = <span class=\"constant\">nil</span></span><br><span class=\"line\">      y = y.Right</span><br><span class=\"line\">    }</span><br><span class=\"line\">    y.Parent = <span class=\"constant\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">    fibHeapNodeUnion(h.Min, x)</span><br><span class=\"line\">  }</span><br><span class=\"line\">  fibHeapNodeRemove(z)</span><br><span class=\"line\">  z.Child = <span class=\"constant\">nil</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> z == z.Right {</span><br><span class=\"line\">    h.Min = <span class=\"constant\">nil</span></span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    h.Min = z.Right</span><br><span class=\"line\">    consolidate(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\">  h.Size -= <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  z.Left, z.Right = z, z</span><br><span class=\"line\">  <span class=\"keyword\">return</span> z</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> FibHeapLink(h *FibHeap, y, x *FibHeapNode) {</span><br><span class=\"line\">  fibHeapNodeRemove(y)</span><br><span class=\"line\"></span><br><span class=\"line\">  z := x.Child</span><br><span class=\"line\">  <span class=\"keyword\">if</span> z != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    fibHeapNodeAdd(z, y)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    x.Child = y</span><br><span class=\"line\">    y.Parent = x</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  x.Degree += <span class=\"number\">1</span></span><br><span class=\"line\">  y.Mark = <span class=\"constant\">false</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> consolidate(h *FibHeap) {</span><br><span class=\"line\">  d := <span class=\"typename\">int</span>(math.Floor(math.Log2(<span class=\"typename\">float64</span>(h.Size))) + <span class=\"number\">1.0</span>)</span><br><span class=\"line\">  dArr := <span class=\"built_in\">make</span>([]*FibHeapNode, d)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> <span class=\"constant\">nil</span> != h.Min {</span><br><span class=\"line\">    x := FibHeapMinRemove(h)</span><br><span class=\"line\">    degree := x.Degree</span><br><span class=\"line\">    <span class=\"keyword\">for</span> dArr[degree] != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      y := dArr[degree]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> x.Key &gt; y.Key {</span><br><span class=\"line\">\tx, y = y, x</span><br><span class=\"line\">      }</span><br><span class=\"line\">      FibHeapLink(h, y, x)</span><br><span class=\"line\">      dArr[degree] = <span class=\"constant\">nil</span></span><br><span class=\"line\">      degree += <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    dArr[degree] = x</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  h.Min = <span class=\"constant\">nil</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> dArr {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dArr[i] != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      x := dArr[i]</span><br><span class=\"line\">      <span class=\"keyword\">if</span> h.Min != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">\tfibHeapNodeAdd(h.Min, x)</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">\th.Min = x</span><br><span class=\"line\">\tx.Right = x</span><br><span class=\"line\">\tx.Left = x</span><br><span class=\"line\">      }</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> h.Min.Key &gt; x.Key {</span><br><span class=\"line\">\th.Min = x</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> FibHeapDecrKey(h *FibHeap, x *FibHeapNode, key <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> key &gt; x.Key {</span><br><span class=\"line\">    <span class=\"built_in\">panic</span>(<span class=\"string\">\"new key is greater than current key.\"</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  x.Key = key</span><br><span class=\"line\">  y := x.Parent</span><br><span class=\"line\">  <span class=\"keyword\">if</span> y != <span class=\"constant\">nil</span> &amp;&amp; x.Key &lt; y.Key {</span><br><span class=\"line\">    cut(h, x, y)</span><br><span class=\"line\">    cascadingCut(h, y)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> x.Key &lt; h.Min.Key {</span><br><span class=\"line\">    h.Min = x</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> cut(h *FibHeap, x, y *FibHeapNode) {</span><br><span class=\"line\">  fibHeapNodeRemove(x)</span><br><span class=\"line\">  renewDegree(y, x.Degree)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> x == x.Right {</span><br><span class=\"line\">    y.Child = <span class=\"constant\">nil</span></span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    y.Child = x.Right</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  x.Left, x.Right = x, x</span><br><span class=\"line\">  x.Parent = <span class=\"constant\">nil</span></span><br><span class=\"line\">  x.Mark = <span class=\"constant\">false</span></span><br><span class=\"line\">  fibHeapNodeAdd(h.Min, x)</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> cascadingCut(h *FibHeap, y *FibHeapNode) {</span><br><span class=\"line\">  z := y.Parent</span><br><span class=\"line\">  <span class=\"keyword\">if</span> z != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> y.Mark == <span class=\"constant\">false</span> {</span><br><span class=\"line\">      y.Mark = <span class=\"constant\">true</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      cut(h, y, z)</span><br><span class=\"line\">      cascadingCut(h, z)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> renewDegree(y *FibHeapNode, degree <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  y.Degree -= degree</span><br><span class=\"line\">  <span class=\"keyword\">if</span> y.Parent != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    renewDegree(y.Parent, degree)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> FibHeapDelete(h *FibHeap, x *FibHeapNode) {</span><br><span class=\"line\">  FibHeapDecrKey(h, x, math.MinInt32)</span><br><span class=\"line\">  FibHeapExtractMin(h)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  lh := MakeFibHeap()</span><br><span class=\"line\">  x := &amp;FibHeapNode{</span><br><span class=\"line\">    Key: <span class=\"number\">1</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  y := &amp;FibHeapNode{</span><br><span class=\"line\">    Key: <span class=\"number\">2</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  z := &amp;FibHeapNode{</span><br><span class=\"line\">    Key: <span class=\"number\">3</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  w := &amp;FibHeapNode{</span><br><span class=\"line\">    Key: <span class=\"number\">4</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  FibHeapInsert(lh, x)</span><br><span class=\"line\">  FibHeapInsert(lh, y)</span><br><span class=\"line\">  FibHeapInsert(lh, z)</span><br><span class=\"line\">  FibHeapInsert(lh, w)</span><br><span class=\"line\">  fmt.Println(FibHeapMinimum(lh))</span><br><span class=\"line\">  fmt.Println(FibHeapExtractMin(lh))</span><br><span class=\"line\">  fmt.Println(lh, *y, *z, *w)</span><br><span class=\"line\">  FibHeapDecrKey(lh, w, -<span class=\"number\">3</span>)</span><br><span class=\"line\">  fmt.Println(FibHeapExtractMin(lh))</span><br><span class=\"line\">  fmt.Println(FibHeapMinimum(lh))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-9\" class=\"outline-2\">\n<h2 id=\"sec-9\"><a id=\"ID-b8620d40-a8d8-4cf3-a0c0-06dc702538ae\" name=\"ID-b8620d40-a8d8-4cf3-a0c0-06dc702538ae\"></a><span class=\"section-number-2\">9</span> WAITING 二叉查找树</h2>\n<div class=\"outline-text-2\" id=\"text-9\">\n\n<ul class=\"org-ul\">\n<li>State \"WAITING\"    from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-25 Wed 10:29]</span></span> <br>\n     等待被测试\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> TreeNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Parent *TreeNode</span><br><span class=\"line\">  Left   *TreeNode</span><br><span class=\"line\">  Right  *TreeNode</span><br><span class=\"line\">  Key    <span class=\"typename\">int</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Tree <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Root *TreeNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> TreeSearch(x *TreeNode, k <span class=\"typename\">int</span>) *TreeNode {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> x == <span class=\"constant\">nil</span> || k == x.Key {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> x</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> k &lt; x.Key {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TreeSearch(x.Left, k)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TreeSearch(x.Right, k)</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> IterativeTreeSearch(x *TreeNode, k <span class=\"typename\">int</span>) *TreeNode {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> x != <span class=\"constant\">nil</span> &amp;&amp; k != x.Key {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> k &lt; x.Key {</span><br><span class=\"line\">      x = x.Left</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      x = x.Right</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> TreeMinimum(x *TreeNode) *TreeNode {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> x.Left != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    x = x.Left</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> TreeMaximum(x *TreeNode) *TreeNode {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> x.Right != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    x = x.Right</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> TreeSuccessor(x *TreeNode) *TreeNode {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> x.Right != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TreeMinimum(x.Right)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  y := x.Parent</span><br><span class=\"line\">  <span class=\"keyword\">for</span> y != <span class=\"constant\">nil</span> &amp;&amp; x == y.Right {</span><br><span class=\"line\">    x = y</span><br><span class=\"line\">    y = y.Parent</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> y</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> TreePredecessor(x *TreeNode) *TreeNode {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> x.Left != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> TreeMaximum(x.Left)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  y := x.Parent</span><br><span class=\"line\">  <span class=\"keyword\">for</span> y != <span class=\"constant\">nil</span> &amp;&amp; x == y.Left {</span><br><span class=\"line\">    x = y</span><br><span class=\"line\">    y = y.Parent</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> y</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> TreeInsert(T *Tree, z *TreeNode) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> y *TreeNode</span><br><span class=\"line\">  x := T.Root</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> x != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    y = x</span><br><span class=\"line\">    <span class=\"keyword\">if</span> z.Key &lt; x.Key {</span><br><span class=\"line\">      x = x.Left</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      x = x.Right</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  z.Parent = y</span><br><span class=\"line\">  <span class=\"keyword\">if</span> y == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    T.Root = z</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> z.Key &lt; y.Key {</span><br><span class=\"line\">      y.Left = z</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      y.Right = z</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> TreeDelete(T *Tree, z *TreeNode) {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> x, y *TreeNode</span><br><span class=\"line\">  <span class=\"keyword\">if</span> z.Left == <span class=\"constant\">nil</span> || z.Right == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    y = z</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    y = TreeSuccessor(z)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> y.Left != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    x = y.Left</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    x = y.Right</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> x != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    x.Parent = y.Parent</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> y.Parent == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    T.Root = x</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> y == y.Parent.Left {</span><br><span class=\"line\">      y.Parent.Left = x</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      y.Parent.Right = x</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> y != z {</span><br><span class=\"line\">    z.Key = y.Key</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  t := &amp;Tree{}</span><br><span class=\"line\">  numM := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"typename\">int</span>]<span class=\"typename\">bool</span>)</span><br><span class=\"line\">  cn := <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> cn &lt; <span class=\"number\">50</span> {</span><br><span class=\"line\">    num := rand.Intn(<span class=\"number\">1000</span>)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> !numM[num] {</span><br><span class=\"line\">      cn += <span class=\"number\">1</span></span><br><span class=\"line\">      numM[num] = <span class=\"constant\">true</span></span><br><span class=\"line\">      tn := &amp;TreeNode{</span><br><span class=\"line\">\tKey: num,</span><br><span class=\"line\">      }</span><br><span class=\"line\">      TreeInsert(t, tn)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  fmt.Println(TreeMinimum(t.Root))</span><br><span class=\"line\">  fmt.Println(TreeMaximum(t.Root))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-10\" class=\"outline-2\">\n<h2 id=\"sec-10\"><a id=\"ID-9bc4f6c1-bfbb-41a1-9665-2af19ccad6d2\" name=\"ID-9bc4f6c1-bfbb-41a1-9665-2af19ccad6d2\"></a><span class=\"section-number-2\">10</span> <span class=\"todo TODO\">TODO</span> 红黑树</h2>\n<div class=\"outline-text-2\" id=\"text-10\">\n\n<p>\n#+NAME left-leaning-red-black-tree\n</p>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  RED   = <span class=\"constant\">true</span></span><br><span class=\"line\">  BLACK = <span class=\"constant\">false</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> (</span><br><span class=\"line\">  BST = <span class=\"constant\">iota</span></span><br><span class=\"line\">  TD234</span><br><span class=\"line\">  BU23</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> Node <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Left  *Node</span><br><span class=\"line\">  Right *Node</span><br><span class=\"line\">  Color <span class=\"typename\">bool</span></span><br><span class=\"line\">  Key   <span class=\"typename\">int</span></span><br><span class=\"line\">  Val   <span class=\"keyword\">interface</span>{}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> isRed(x *Node) <span class=\"typename\">bool</span> {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> x == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">false</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> x.Color == RED</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LLRBTree <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Root *Node</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (t *LLRBTree) Get(key <span class=\"typename\">int</span>) <span class=\"keyword\">interface</span>{} {</span><br><span class=\"line\">  x := t.Root</span><br><span class=\"line\">  <span class=\"keyword\">for</span> x != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> key &lt; x.Key {</span><br><span class=\"line\">      x = x.Left</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> key &gt; x.Key {</span><br><span class=\"line\">      x = x.Right</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> x.Val</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Make a right-leaning 3-node lean to the left.</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> rotateLeft(h *Node) *Node {</span><br><span class=\"line\">  x := h.Right</span><br><span class=\"line\">  h.Right = x.Left</span><br><span class=\"line\">  x.Left = h</span><br><span class=\"line\">  x.Color = x.Left.Color</span><br><span class=\"line\">  x.Left.Color = RED</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Make a left-leaning 3-node lean to the right.</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> rotateRight(h *Node) *Node {</span><br><span class=\"line\">  x := h.Left</span><br><span class=\"line\">  h.Left = x.Right</span><br><span class=\"line\">  x.Right = h</span><br><span class=\"line\">  x.Color = x.Right.Color</span><br><span class=\"line\">  x.Right.Color = RED</span><br><span class=\"line\">  <span class=\"keyword\">return</span> x</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> colorFlip(x *Node) {</span><br><span class=\"line\">  x.Color = !x.Color</span><br><span class=\"line\">  x.Left.Color = !x.Left.Color</span><br><span class=\"line\">  x.Right.Color = !x.Right.Color</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> insert(h *Node, key <span class=\"typename\">int</span>, val <span class=\"keyword\">interface</span>{}) {</span><br><span class=\"line\">  <span class=\"comment\">// insert at the bottom</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> h == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;Node{Key: key, Val: val}</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// split 4-nodes on the way down</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isRed(h.left) &amp;&amp; isRed(h.right) {</span><br><span class=\"line\">    colorFlip(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// standard BST insert code</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> key &lt; h.Key {</span><br><span class=\"line\">    h.Left = insert(h.Left, key, val)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> key &gt; h.Key {</span><br><span class=\"line\">    h.Right = insert(h.Right, key, val)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    h.Val = val</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// fix right-leaning reds on the way up</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isRed(h.Right) {</span><br><span class=\"line\">    h = rotateLeft(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// fix two reds in a row on the way up</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isRed(h.Left) &amp;&amp; isRed(h.Left.Left) {</span><br><span class=\"line\">    h = rotateRight(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> h</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (t *LLRBTree) Put(key <span class=\"typename\">int</span>, val <span class=\"keyword\">interface</span>{}) {</span><br><span class=\"line\">  t.Root = insert(t.Root, key, val)</span><br><span class=\"line\">  root.Color = BLACK</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> fixUp(h *Node) *Node {</span><br><span class=\"line\">  <span class=\"comment\">// fix right-leaning reds on the way up</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isRed(h.Right) {</span><br><span class=\"line\">    h = rotateLeft(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// fix two reds in a row on the way up</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isRed(h.Left) &amp;&amp; isRed(h.Left.Left) {</span><br><span class=\"line\">    h = rotateRight(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// split 4-nodes on the way down</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isRed(h.Left) &amp;&amp; isRed(h.Right) {</span><br><span class=\"line\">    colorFlip(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> h</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Assuming that h is red and both h.right and h.right.left</span></span><br><span class=\"line\"><span class=\"comment\">// are black, make h.right or one of its children red.</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> moveRedRight(h *Node) *Node {</span><br><span class=\"line\">  colorFlip(h)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> isRed(h.Left.Left) {</span><br><span class=\"line\">    h = rotateRight(h)</span><br><span class=\"line\">    colorFlip(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> h</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> deleteMax(h *Node) *Node {</span><br><span class=\"line\">  <span class=\"comment\">// lean 3-nodes to the right</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> isRed(h.Left) {</span><br><span class=\"line\">    h = rotateRight(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// remove node on bottom level</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> h.Right == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// push red link down if necessary</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !isRed(h.Right) &amp;&amp; !isRed(h.Right.Left) {</span><br><span class=\"line\">    h = moveRedRight(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// move down one level</span></span><br><span class=\"line\">  h.Right = deleteMax(h.Right)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// fix right-leaning red links and eliminate 4-nodes on the way up</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fixUp(h)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (t *LLRBTree) deleteMax() {</span><br><span class=\"line\">  t.Root = deleteMax(t.Root)</span><br><span class=\"line\">  t.Root.Color = BLACK</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Assuming that h is red and both h.left and h.left.left</span></span><br><span class=\"line\"><span class=\"comment\">// are black, make h.left or one of its children red.</span></span><br><span class=\"line\"><span class=\"keyword\">func</span> moveRedLeft(h *Node) *Node {</span><br><span class=\"line\">  colorFlip(h)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> isRed(h.Right.Left) {</span><br><span class=\"line\">    h.Right = rotateRight(h.Right)</span><br><span class=\"line\">    h = rotateLeft(h)</span><br><span class=\"line\">    colorFlip(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> h</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> deleteMin(h *Node) *Node {</span><br><span class=\"line\">  <span class=\"comment\">// remove node on bottom level</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> h.Left == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// push red link down if necessary</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> !isRed(h.Left) &amp;&amp; !isRed(h.Left.Left) {</span><br><span class=\"line\">    h = moveRedLeft(h)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// move down one level</span></span><br><span class=\"line\">  h.Left = deleteMin(h.Left)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// fix right-leaning red links and eliminate 4-nodes on the way up</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fixUp(h)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (t *LLRBTree) deleteMin() {</span><br><span class=\"line\">  t.Root = deleteMin(t.Root)</span><br><span class=\"line\">  t.Root.Color = BLACK</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (t *LLRBTree) min() *Node {</span><br><span class=\"line\">  x := t.Root</span><br><span class=\"line\">  y := x</span><br><span class=\"line\">  <span class=\"keyword\">for</span> x != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    y = x</span><br><span class=\"line\">    x = x.Left</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> y</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> del(h *Node, key <span class=\"typename\">int</span>) *Node {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> key &lt; h.Key { <span class=\"comment\">// LEFT</span></span><br><span class=\"line\">    <span class=\"comment\">// push red link down if necessary</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> !isRed(h.Left) &amp;&amp; !isRed(h.Left.Left) {</span><br><span class=\"line\">      h = moveRedLeft(h)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//  move down(left)</span></span><br><span class=\"line\">    h.Left = del(h.Left, key)</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> { <span class=\"comment\">// RIGHT or EQUAL</span></span><br><span class=\"line\">    <span class=\"comment\">// lean 3-nodes to the right</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isRed(h.Left) {</span><br><span class=\"line\">      h = rotateRight(h)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// EQUAL(at bottom) delete node</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> cmp == <span class=\"number\">0</span> &amp;&amp; h.Right == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// push red right if necessary</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> !isRed(h.Right) &amp;&amp; !isRed(h.Right.Left) {</span><br><span class=\"line\">      h = moveRedRight(h)</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> key == h.Key {</span><br><span class=\"line\">      successor := t.min(h.Right)</span><br><span class=\"line\">      h.Key = successor.Key</span><br><span class=\"line\">      h.Val = successor.Val</span><br><span class=\"line\">      h.right = deleteMin(h.Right)</span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      <span class=\"comment\">//  move down(right)</span></span><br><span class=\"line\">      h.Right = del(h.Right, key)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> fixUp(h)</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (t *LLRBTree) Delete(key <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  t.Root = del(t.Root, key)</span><br><span class=\"line\">  t.Root.Color = BLACK</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-11\" class=\"outline-2\">\n<h2 id=\"sec-11\"><a id=\"ID-4f0f4dc5-c3ea-4487-88f3-a82369c76d94\" name=\"ID-4f0f4dc5-c3ea-4487-88f3-a82369c76d94\"></a><span class=\"section-number-2\">11</span> <span class=\"todo TODO\">TODO</span> B树</h2>\n<div class=\"outline-text-2\" id=\"text-11\">\n</div>\n</div>\n<div id=\"outline-container-sec-12\" class=\"outline-2\">\n<h2 id=\"sec-12\"><a id=\"ID-712dd1e1-eb8c-4cdc-a295-be354f9204b9\" name=\"ID-712dd1e1-eb8c-4cdc-a295-be354f9204b9\"></a><span class=\"section-number-2\">12</span> <span class=\"done DONE\">DONE</span> 图</h2>\n<div class=\"outline-text-2\" id=\"text-12\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-15 Sun 16:49]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-12-1\" class=\"outline-3\">\n<h3 id=\"sec-12-1\"><a id=\"ID-b0d24a1b-b000-418e-bfd7-c21423997ae2\" name=\"ID-b0d24a1b-b000-418e-bfd7-c21423997ae2\"></a><span class=\"section-number-3\">12.1</span> <span class=\"done DONE\">DONE</span> 定义</h3>\n<div class=\"outline-text-3\" id=\"text-12-1\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> ArcNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  AdjVex <span class=\"typename\">int</span></span><br><span class=\"line\">  Info   <span class=\"keyword\">interface</span>{}</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> VNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Data       <span class=\"keyword\">interface</span>{}</span><br><span class=\"line\">  ArcNodeArr []ArcNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> AdjList []VNode</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> MakeDot(vertices AdjList) <span class=\"typename\">string</span> {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> ans <span class=\"typename\">string</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u, _ := <span class=\"keyword\">range</span> vertices {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[i].AdjVex</span><br><span class=\"line\">      ans += fmt.Sprintf(<span class=\"string\">\"%v -&gt; %v;\\n\"</span>, u, v)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> makeDotScb(scb [][]<span class=\"typename\">int</span>, vertices AdjList) <span class=\"typename\">string</span> {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> clusters <span class=\"typename\">string</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> scb {</span><br><span class=\"line\">    arr := scb[i]</span><br><span class=\"line\">    <span class=\"keyword\">var</span> node_str <span class=\"typename\">string</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> _, u := <span class=\"keyword\">range</span> arr {</span><br><span class=\"line\">\t    node_str += fmt.Sprintf(<span class=\"string\">\"%v; \"</span>, u)</span><br><span class=\"line\">    }</span><br><span class=\"line\">    cluster_str := fmt.Sprintf(<span class=\"string\">\"subgraph \\\"cluster-%v\\\" {\\n\\t label=\\\"scb-%v\\\";\\n\\t %v \\n}\\n\"</span>, i, i, node_str)</span><br><span class=\"line\">    clusters += cluster_str</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span> MakeDot(vertices) + clusters</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{},</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(<span class=\"string\">\"{rank=same; 2 3;}\\n\"</span>+ MakeDot(vertices))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">digraph {&#10; $input&#10;}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> Edge <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Start  <span class=\"typename\">int</span></span><br><span class=\"line\">  End    <span class=\"typename\">int</span></span><br><span class=\"line\">  Weight <span class=\"typename\">int</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> EdgeList []Edge</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-2\" class=\"outline-3\">\n<h3 id=\"sec-12-2\"><a id=\"ID-20325185-f9a1-43d8-8d65-27d588f871c2\" name=\"ID-20325185-f9a1-43d8-8d65-27d588f871c2\"></a><span class=\"section-number-3\">12.2</span> <span class=\"done DONE\">DONE</span> 广度优先搜索(BFS)</h3>\n<div class=\"outline-text-3\" id=\"text-12-2\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> bfs(vertices AdjList, u <span class=\"typename\">int</span>, visitFunc <span class=\"keyword\">func</span>(<span class=\"keyword\">interface</span>{})) {</span><br><span class=\"line\">  q := New()</span><br><span class=\"line\">  visited := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\"></span><br><span class=\"line\">  visitFunc(vertices[u].Data)</span><br><span class=\"line\">  q.Push(u)</span><br><span class=\"line\">  visited[u] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> !q.Empty() {</span><br><span class=\"line\">    v := q.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[v].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> visited[vertices[v].ArcNodeArr[j].AdjVex] != <span class=\"number\">1</span> {</span><br><span class=\"line\">\tvisitFunc(vertices[v].ArcNodeArr[j].AdjVex)</span><br><span class=\"line\">\tq.Push(vertices[v].ArcNodeArr[j].AdjVex)</span><br><span class=\"line\">\tvisited[vertices[v].ArcNodeArr[j].AdjVex] = <span class=\"number\">1</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">5</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  bfs(vertices, <span class=\"number\">0</span>, <span class=\"keyword\">func</span>(data <span class=\"keyword\">interface</span>{}) {</span><br><span class=\"line\">    fmt.Println(data)</span><br><span class=\"line\">  })</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-3\" class=\"outline-3\">\n<h3 id=\"sec-12-3\"><a id=\"ID-bc174bfe-904d-43bc-8e90-b668158732ca\" name=\"ID-bc174bfe-904d-43bc-8e90-b668158732ca\"></a><span class=\"section-number-3\">12.3</span> <span class=\"done DONE\">DONE</span> 深度优先搜索(DFS)</h3>\n<div class=\"outline-text-3\" id=\"text-12-3\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-09 Mon 11:52]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> dfs(vertices AdjList, visitFunc <span class=\"keyword\">func</span>(<span class=\"keyword\">interface</span>{})) {</span><br><span class=\"line\">  visited := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> visited[u] != <span class=\"number\">1</span> {</span><br><span class=\"line\">      dfsVisit(vertices, u, visited, visitFunc)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> dfsVisit(vertices AdjList, u <span class=\"typename\">int</span>, visited []<span class=\"typename\">int</span>, visitFunc <span class=\"keyword\">func</span>(<span class=\"keyword\">interface</span>{})) {</span><br><span class=\"line\">  visited[u] = <span class=\"number\">1</span></span><br><span class=\"line\">  visitFunc(vertices[u].Data)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    v := vertices[u].ArcNodeArr[i].AdjVex</span><br><span class=\"line\">    <span class=\"keyword\">if</span> visited[v] != <span class=\"number\">1</span> {</span><br><span class=\"line\">      dfsVisit(vertices, v, visited, visitFunc)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">5</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  dfs(vertices, <span class=\"keyword\">func</span>(data <span class=\"keyword\">interface</span>{}) {</span><br><span class=\"line\">    fmt.Println(data)</span><br><span class=\"line\">  })</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-4\" class=\"outline-3\">\n<h3 id=\"sec-12-4\"><a id=\"ID-61409d21-342f-4d5d-8d3d-79f2cc0c6d30\" name=\"ID-61409d21-342f-4d5d-8d3d-79f2cc0c6d30\"></a><span class=\"section-number-3\">12.4</span> <span class=\"done DONE\">DONE</span> Union-Find算法</h3>\n<div class=\"outline-text-3\" id=\"text-12-4\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> hasCycle(edges EdgeList, vexNum <span class=\"typename\">int</span>) <span class=\"typename\">bool</span> {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> findFunc <span class=\"keyword\">func</span>([]<span class=\"typename\">int</span>, <span class=\"typename\">int</span>) <span class=\"typename\">int</span></span><br><span class=\"line\">  findFunc = <span class=\"keyword\">func</span>(parent []<span class=\"typename\">int</span>, i <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> parent[i] == -<span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findFunc(parent, parent[i])</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  unionFunc := <span class=\"keyword\">func</span>(parent []<span class=\"typename\">int</span>, i, j <span class=\"typename\">int</span>) {</span><br><span class=\"line\">    iSet := findFunc(parent, i)</span><br><span class=\"line\">    jSet := findFunc(parent, j)</span><br><span class=\"line\">    parent[iSet] = jSet</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  parent := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, vexNum)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> parent {</span><br><span class=\"line\">    parent[i] = -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, edge := <span class=\"keyword\">range</span> edges {</span><br><span class=\"line\">    i := findFunc(parent, edge.Start)</span><br><span class=\"line\">    j := findFunc(parent, edge.End)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> i == j {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"constant\">true</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    unionFunc(parent, i, j)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"constant\">false</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  edges := []Edge{</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">0</span>, End: <span class=\"number\">1</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">1</span>, End: <span class=\"number\">2</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">2</span>, End: <span class=\"number\">3</span>},</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(hasCycle(edges, <span class=\"number\">4</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-5\" class=\"outline-3\">\n<h3 id=\"sec-12-5\"><a id=\"ID-9b477339-9bea-4221-b867-432f9b79bb66\" name=\"ID-9b477339-9bea-4221-b867-432f9b79bb66\"></a><span class=\"section-number-3\">12.5</span> <span class=\"done DONE\">DONE</span> 拓扑排序</h3>\n<div class=\"outline-text-3\" id=\"text-12-5\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> TopologicalSort(vertices AdjList) ([]<span class=\"typename\">int</span>, <span class=\"typename\">bool</span>) {</span><br><span class=\"line\">  q := New()</span><br><span class=\"line\">  visited := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  indegree := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> visited[u] != <span class=\"number\">1</span> {</span><br><span class=\"line\">      q.Push(u)</span><br><span class=\"line\">      visited[u] = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> !q.Empty() {</span><br><span class=\"line\">\tv := q.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[v].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">\t  indegree[vertices[v].ArcNodeArr[j].AdjVex] += <span class=\"number\">1</span></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> visited[vertices[v].ArcNodeArr[j].AdjVex] != <span class=\"number\">1</span> {</span><br><span class=\"line\">\t    q.Push(vertices[v].ArcNodeArr[j].AdjVex)</span><br><span class=\"line\">\t    visited[vertices[v].ArcNodeArr[j].AdjVex] = <span class=\"number\">1</span></span><br><span class=\"line\">\t  }</span><br><span class=\"line\">\t}</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  ans := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  q = New()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> indegree[u] == <span class=\"number\">0</span> {</span><br><span class=\"line\">      q.Push(u)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> !q.Empty() {</span><br><span class=\"line\">    u := q.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">    ans = <span class=\"built_in\">append</span>(ans, u)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      indegree[v] -= <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> indegree[v] == <span class=\"number\">0</span> {</span><br><span class=\"line\">\tq.Push(v)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans, <span class=\"built_in\">len</span>(vertices) == <span class=\"built_in\">len</span>(ans)</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data:       <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">5</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(TopologicalSort(vertices))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> TopologicalSort(vertices AdjList) ([]<span class=\"typename\">int</span>, <span class=\"typename\">bool</span>) {</span><br><span class=\"line\">  s := New()</span><br><span class=\"line\">  visited := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  father := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> father {</span><br><span class=\"line\">    father[i] = -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dfsVisit <span class=\"keyword\">func</span>(<span class=\"typename\">int</span>)</span><br><span class=\"line\">  dfsVisit = <span class=\"keyword\">func</span>(u <span class=\"typename\">int</span>) {</span><br><span class=\"line\">    visited[u] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[i].AdjVex</span><br><span class=\"line\">      <span class=\"keyword\">if</span> visited[v] == <span class=\"number\">1</span> {</span><br><span class=\"line\">\ttmp := u</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> tmp != v &amp;&amp; tmp &gt; <span class=\"number\">0</span> {</span><br><span class=\"line\">\t  fmt.Print(tmp, <span class=\"string\">\"-&gt;\"</span>)</span><br><span class=\"line\">\t  tmp = father[tmp]</span><br><span class=\"line\">\t}</span><br><span class=\"line\">\tfmt.Println(tmp)</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> visited[v] != <span class=\"number\">2</span> {</span><br><span class=\"line\">\tfather[v] = u</span><br><span class=\"line\">\tdfsVisit(v)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    visited[u] = <span class=\"number\">2</span></span><br><span class=\"line\">    s.Push(u)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> visited[u] != <span class=\"number\">1</span> {</span><br><span class=\"line\">      dfsVisit(u)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  ans := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> !s.Empty() {</span><br><span class=\"line\">    ans = <span class=\"built_in\">append</span>(ans, s.Pop().(<span class=\"typename\">int</span>))</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans, <span class=\"constant\">true</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">     <span class=\"keyword\">import</span> <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">       vertices := AdjList{</span><br><span class=\"line\">\t VNode{</span><br><span class=\"line\">\t   Data:       <span class=\"number\">0</span>,</span><br><span class=\"line\">\t   ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t     ArcNode{AdjVex: <span class=\"number\">4</span>},</span><br><span class=\"line\">},</span><br><span class=\"line\">\t },</span><br><span class=\"line\">\t VNode{</span><br><span class=\"line\">\t   Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">\t   ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t     ArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\t   },</span><br><span class=\"line\">\t },</span><br><span class=\"line\">\t VNode{</span><br><span class=\"line\">\t   Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">\t   ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t     ArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\t     ArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">\t   },</span><br><span class=\"line\">\t },</span><br><span class=\"line\">\t VNode{</span><br><span class=\"line\">\t   Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">\t   ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t     ArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\t   },</span><br><span class=\"line\">\t },</span><br><span class=\"line\">\t VNode{</span><br><span class=\"line\">\t   Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">\t   ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t     ArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\t     ArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\t   },</span><br><span class=\"line\">\t },</span><br><span class=\"line\">\t VNode{</span><br><span class=\"line\">\t   Data: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t   ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t     ArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\t     ArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">\t   },</span><br><span class=\"line\">\t },</span><br><span class=\"line\">       }</span><br><span class=\"line\"></span><br><span class=\"line\">       fmt.Println(TopologicalSort(vertices))</span><br><span class=\"line\">     }</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-6\" class=\"outline-3\">\n<h3 id=\"sec-12-6\"><a id=\"ID-126b5a2f-f7d3-4b7d-865e-43a28f769243\" name=\"ID-126b5a2f-f7d3-4b7d-865e-43a28f769243\"></a><span class=\"section-number-3\">12.6</span> <span class=\"done DONE\">DONE</span> 强连通分支</h3>\n<div class=\"outline-text-3\" id=\"text-12-6\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-15 Sun 16:49]</span></span>\n</li>\n</ul>\n</div>\n\n<div id=\"outline-container-sec-12-6-1\" class=\"outline-4\">\n<h4 id=\"sec-12-6-1\"><a id=\"ID-e9efc376-da3f-4c36-9db7-e6a3490c0f3f\" name=\"ID-e9efc376-da3f-4c36-9db7-e6a3490c0f3f\"></a><span class=\"section-number-4\">12.6.1</span> <span class=\"done DONE\">DONE</span> Kosaraju算法</h4>\n<div class=\"outline-text-4\" id=\"text-12-6-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-15 Sun 11:26]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> reverse(vertices AdjList) AdjList {</span><br><span class=\"line\">  rv := <span class=\"built_in\">make</span>(AdjList, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(rv); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    rv[u].Data = u</span><br><span class=\"line\">    rv[u].ArcNodeArr = <span class=\"built_in\">make</span>([]ArcNode, <span class=\"number\">0</span>)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      rv[v].ArcNodeArr = <span class=\"built_in\">append</span>(</span><br><span class=\"line\">\trv[v].ArcNodeArr,</span><br><span class=\"line\">\tArcNode{</span><br><span class=\"line\">\t  AdjVex: u,</span><br><span class=\"line\">\t})</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> rv</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> kosaraju(vertices AdjList) [][]<span class=\"typename\">int</span> {</span><br><span class=\"line\">  visited := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  dsfArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  finArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> dfs <span class=\"keyword\">func</span>(AdjList, <span class=\"typename\">int</span>)</span><br><span class=\"line\">  dfs = <span class=\"keyword\">func</span>(vertices AdjList, u <span class=\"typename\">int</span>) {</span><br><span class=\"line\">    visited[u] = <span class=\"number\">1</span></span><br><span class=\"line\">    dsfArr = <span class=\"built_in\">append</span>(dsfArr, u)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[i].AdjVex</span><br><span class=\"line\">      <span class=\"keyword\">if</span> visited[v] != <span class=\"number\">1</span> {</span><br><span class=\"line\">\tdfs(vertices, v)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    finArr = <span class=\"built_in\">append</span>(finArr, u)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> visited[u] != <span class=\"number\">1</span> {</span><br><span class=\"line\">      dfs(vertices, u)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  rv := reverse(vertices)</span><br><span class=\"line\">  visited = <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  c_finArr := finArr</span><br><span class=\"line\">  ans := <span class=\"built_in\">make</span>([][]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(c_finArr) - <span class=\"number\">1</span>; i &gt;= <span class=\"number\">0</span>; i -= <span class=\"number\">1</span> {</span><br><span class=\"line\">    u := c_finArr[i]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> visited[u] != <span class=\"number\">1</span> {</span><br><span class=\"line\">      dsfArr = <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">      dfs(rv, u)</span><br><span class=\"line\">      ans = <span class=\"built_in\">append</span>(ans, dsfArr)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data:       <span class=\"number\">5</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(makeDotScb(kosaraju(vertices), vertices))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">digraph G {&#10;$input&#10;}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-6-2\" class=\"outline-4\">\n<h4 id=\"sec-12-6-2\"><a id=\"ID-efbc9d75-affa-4128-b3dd-f125a6784b76\" name=\"ID-efbc9d75-affa-4128-b3dd-f125a6784b76\"></a><span class=\"section-number-4\">12.6.2</span> <span class=\"done DONE\">DONE</span> Tarjan算法</h4>\n<div class=\"outline-text-4\" id=\"text-12-6-2\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> tarjan(vertices AdjList) [][]<span class=\"typename\">int</span> {</span><br><span class=\"line\">  dsfArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  lowArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  inStack := <span class=\"built_in\">make</span>([]<span class=\"typename\">bool</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> dsfArr {</span><br><span class=\"line\">    dsfArr[i] = -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  index := <span class=\"number\">0</span></span><br><span class=\"line\">  s := New()</span><br><span class=\"line\">  ans := <span class=\"built_in\">make</span>([][]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> strongconnect <span class=\"keyword\">func</span>(<span class=\"typename\">int</span>)</span><br><span class=\"line\">  strongconnect = <span class=\"keyword\">func</span>(u <span class=\"typename\">int</span>) {</span><br><span class=\"line\">    dsfArr[u] = index</span><br><span class=\"line\">    lowArr[u] = index</span><br><span class=\"line\">    index += <span class=\"number\">1</span></span><br><span class=\"line\">    inStack[u] = <span class=\"constant\">true</span></span><br><span class=\"line\">    s.Push(u)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[i].AdjVex</span><br><span class=\"line\">      <span class=\"keyword\">if</span> dsfArr[v] == -<span class=\"number\">1</span> {</span><br><span class=\"line\">\tstrongconnect(v)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> lowArr[v] &lt; lowArr[u] {</span><br><span class=\"line\">\t  lowArr[u] = lowArr[v]</span><br><span class=\"line\">\t}</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> inStack[v] &amp;&amp; lowArr[v] &lt; lowArr[u] {</span><br><span class=\"line\">\tlowArr[u] = lowArr[v]</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> dsfArr[u] == lowArr[u] {</span><br><span class=\"line\">      arr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">      v := s.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> u != v {</span><br><span class=\"line\">\tinStack[v] = <span class=\"constant\">false</span></span><br><span class=\"line\">\tarr = <span class=\"built_in\">append</span>(arr, v)</span><br><span class=\"line\">\tv = s.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      }</span><br><span class=\"line\">      inStack[v] = <span class=\"constant\">false</span></span><br><span class=\"line\">      arr = <span class=\"built_in\">append</span>(arr, v)</span><br><span class=\"line\">      ans = <span class=\"built_in\">append</span>(ans, arr)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dsfArr[u] == -<span class=\"number\">1</span> {</span><br><span class=\"line\">      strongconnect(u)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"> <span class=\"keyword\">import</span> <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"> <span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">   vertices := AdjList{</span><br><span class=\"line\">     VNode{</span><br><span class=\"line\">       Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">       ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t ArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\t ArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">       },</span><br><span class=\"line\">     },</span><br><span class=\"line\">     VNode{</span><br><span class=\"line\">       Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">       ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t ArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">       },</span><br><span class=\"line\">     },</span><br><span class=\"line\">     VNode{</span><br><span class=\"line\">       Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">       ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t ArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">\t ArcNode{AdjVex: <span class=\"number\">4</span>},</span><br><span class=\"line\">       },</span><br><span class=\"line\">     },</span><br><span class=\"line\">     VNode{</span><br><span class=\"line\">       Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">       ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t ArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\t ArcNode{AdjVex: <span class=\"number\">5</span>},</span><br><span class=\"line\">       },</span><br><span class=\"line\">     },</span><br><span class=\"line\">     VNode{</span><br><span class=\"line\">       Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">       ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\t ArcNode{AdjVex: <span class=\"number\">5</span>},</span><br><span class=\"line\">       },</span><br><span class=\"line\">     },</span><br><span class=\"line\">     VNode{</span><br><span class=\"line\">       Data:       <span class=\"number\">5</span>,</span><br><span class=\"line\">       ArcNodeArr: []ArcNode{},</span><br><span class=\"line\">     },</span><br><span class=\"line\">   }</span><br><span class=\"line\"></span><br><span class=\"line\">   fmt.Println(makeDotScb(tarjan(vertices), vertices))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">digraph G {&#10;$input&#10;}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-6-3\" class=\"outline-4\">\n<h4 id=\"sec-12-6-3\"><a id=\"ID-3879f18c-3eda-4bf8-8481-79983e5c02d3\" name=\"ID-3879f18c-3eda-4bf8-8481-79983e5c02d3\"></a><span class=\"section-number-4\">12.6.3</span> <span class=\"done DONE\">DONE</span> Gabow算法</h4>\n<div class=\"outline-text-4\" id=\"text-12-6-3\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-15 Sun 16:49]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> gabow(vertices AdjList) [][]<span class=\"typename\">int</span> {</span><br><span class=\"line\">  dsfArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  partArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> dsfArr {</span><br><span class=\"line\">    dsfArr[i] = -<span class=\"number\">1</span></span><br><span class=\"line\">    partArr[i] = -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  partIndex := <span class=\"number\">0</span></span><br><span class=\"line\">  index := <span class=\"number\">0</span></span><br><span class=\"line\">  ps := New()</span><br><span class=\"line\">  rs := New()</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> strongconnect <span class=\"keyword\">func</span>(<span class=\"typename\">int</span>)</span><br><span class=\"line\">  strongconnect = <span class=\"keyword\">func</span>(u <span class=\"typename\">int</span>) {</span><br><span class=\"line\">    dsfArr[u] = index</span><br><span class=\"line\">    index += <span class=\"number\">1</span></span><br><span class=\"line\">    ps.Push(u)</span><br><span class=\"line\">    rs.Push(u)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[i].AdjVex</span><br><span class=\"line\">      <span class=\"keyword\">if</span> dsfArr[v] == -<span class=\"number\">1</span> {</span><br><span class=\"line\">\tstrongconnect(v)</span><br><span class=\"line\">      } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> partArr[v] == -<span class=\"number\">1</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> dsfArr[rs.Top().(<span class=\"typename\">int</span>)] &gt; dsfArr[v] {</span><br><span class=\"line\">\t  rs.Pop()</span><br><span class=\"line\">\t}</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> u == rs.Top().(<span class=\"typename\">int</span>) {</span><br><span class=\"line\">      rs.Pop()</span><br><span class=\"line\">      partIndex += <span class=\"number\">1</span></span><br><span class=\"line\">      v := ps.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      <span class=\"keyword\">for</span> u != v {</span><br><span class=\"line\">\tpartArr[v] = partIndex</span><br><span class=\"line\">\tv = ps.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      }</span><br><span class=\"line\">      partArr[v] = partIndex</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> dsfArr[u] == -<span class=\"number\">1</span> {</span><br><span class=\"line\">      strongconnect(u)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  ans := <span class=\"built_in\">make</span>([][]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; partIndex+<span class=\"number\">1</span>; i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    arr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(partArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> partArr[j] == i {</span><br><span class=\"line\">\tarr = <span class=\"built_in\">append</span>(arr, j)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    ans = <span class=\"built_in\">append</span>(ans, arr)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data:       <span class=\"number\">5</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{},</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(makeDotScb(gabow(vertices), vertices))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight\"><table><tr><td class=\"code\"><pre><span class=\"line\">digraph G {&#10;$input&#10;}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-7\" class=\"outline-3\">\n<h3 id=\"sec-12-7\"><a id=\"ID-ad6ed0ed-4dd1-4c79-bce0-8a02c3512873\" name=\"ID-ad6ed0ed-4dd1-4c79-bce0-8a02c3512873\"></a><span class=\"section-number-3\">12.7</span> <span class=\"done DONE\">DONE</span> 关键路径</h3>\n<div class=\"outline-text-3\" id=\"text-12-7\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> CriticalPath(vertices AdjList) []<span class=\"typename\">int</span> {</span><br><span class=\"line\">  q := New()</span><br><span class=\"line\">  visited := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  indegree := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  earlyStart := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  lateStart := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> visited[u] != <span class=\"number\">1</span> {</span><br><span class=\"line\">      q.Push(u)</span><br><span class=\"line\">      visited[u] = <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">for</span> !q.Empty() {</span><br><span class=\"line\">\tv := q.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[v].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">\t  w := vertices[v].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">\t  weight := vertices[v].ArcNodeArr[j].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\">\t  indegree[w] += <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> earlyStart[v]+weight &gt; earlyStart[w] {</span><br><span class=\"line\">\t    earlyStart[w] = earlyStart[v] + weight</span><br><span class=\"line\">\t  }</span><br><span class=\"line\"></span><br><span class=\"line\">\t  <span class=\"keyword\">if</span> visited[w] != <span class=\"number\">1</span> {</span><br><span class=\"line\">\t    q.Push(w)</span><br><span class=\"line\">\t    visited[w] = <span class=\"number\">1</span></span><br><span class=\"line\">\t  }</span><br><span class=\"line\">\t}</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  tsArr := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  q = New()</span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> indegree[u] == <span class=\"number\">0</span> {</span><br><span class=\"line\">      q.Push(u)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> !q.Empty() {</span><br><span class=\"line\">    u := q.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">    tsArr = <span class=\"built_in\">append</span>(tsArr, u)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      indegree[v] -= <span class=\"number\">1</span></span><br><span class=\"line\">      <span class=\"keyword\">if</span> indegree[v] == <span class=\"number\">0</span> {</span><br><span class=\"line\">\tq.Push(v)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> lateStart {</span><br><span class=\"line\">    lateStart[i] = -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  e := tsArr[<span class=\"built_in\">len</span>(tsArr)-<span class=\"number\">1</span>]</span><br><span class=\"line\">  lateStart[e] = earlyStart[e]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"built_in\">len</span>(tsArr) - <span class=\"number\">2</span>; i &gt;= <span class=\"number\">0</span>; i -= <span class=\"number\">1</span> {</span><br><span class=\"line\">    u := tsArr[i]</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      weight := vertices[u].ArcNodeArr[j].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> lateStart[u] == -<span class=\"number\">1</span> || lateStart[v]-weight &lt; lateStart[u] {</span><br><span class=\"line\">\tlateStart[u] = lateStart[v] - weight</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  ans := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> earlyStart[i] == lateStart[i] {</span><br><span class=\"line\">      ans = <span class=\"built_in\">append</span>(ans, i)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">8</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">5</span>, Info: <span class=\"number\">7</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">    ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">6</span>, Info: <span class=\"number\">9</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">7</span>, Info: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">5</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">7</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">6</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">9</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">7</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">8</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">8</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">9</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data:       <span class=\"number\">9</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{},</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(CriticalPath(vertices))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> CriticalPath(vertices AdjList) ([]<span class=\"typename\">int</span>, <span class=\"typename\">bool</span>) {</span><br><span class=\"line\">  s := New()</span><br><span class=\"line\">  <span class=\"keyword\">var</span> bCycle <span class=\"typename\">bool</span></span><br><span class=\"line\">  visited := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  earlyStart := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  lateStart := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> dfsVisit <span class=\"keyword\">func</span>(<span class=\"typename\">int</span>)</span><br><span class=\"line\">  dfsVisit = <span class=\"keyword\">func</span>(u <span class=\"typename\">int</span>) {</span><br><span class=\"line\">    visited[u] = <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[i].AdjVex</span><br><span class=\"line\">      weight := vertices[u].ArcNodeArr[i].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> earlyStart[u]+weight &gt; earlyStart[v] {</span><br><span class=\"line\">\tearlyStart[v] = earlyStart[u] + weight</span><br><span class=\"line\">      }</span><br><span class=\"line\">      <span class=\"keyword\">if</span> visited[v] == <span class=\"number\">1</span> {</span><br><span class=\"line\">\tbCycle = <span class=\"constant\">true</span></span><br><span class=\"line\">\t<span class=\"keyword\">return</span></span><br><span class=\"line\">      } <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> visited[v] != <span class=\"number\">2</span> {</span><br><span class=\"line\">\tdfsVisit(v)</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">    visited[u] = <span class=\"number\">2</span></span><br><span class=\"line\">    s.Push(u)</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> visited[u] != <span class=\"number\">1</span> {</span><br><span class=\"line\">      dfsVisit(u)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> lateStart {</span><br><span class=\"line\">    lateStart[i] = -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  e := s.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">  lateStart[e] = earlyStart[e]</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> !s.Empty() {</span><br><span class=\"line\">    u := s.Pop().(<span class=\"typename\">int</span>)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      weight := vertices[u].ArcNodeArr[j].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> lateStart[u] == -<span class=\"number\">1</span> || lateStart[v]-weight &lt; lateStart[u] {</span><br><span class=\"line\">\tlateStart[u] = lateStart[v] - weight</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  ans := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> earlyStart[i] == lateStart[i] {</span><br><span class=\"line\">      ans = <span class=\"built_in\">append</span>(ans, i)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans, bCycle</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"container/list\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">8</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">5</span>, Info: <span class=\"number\">7</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">    ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">6</span>, Info: <span class=\"number\">9</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">7</span>, Info: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">5</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">7</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">6</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">9</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">7</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">8</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">8</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">9</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data:       <span class=\"number\">9</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{},</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(CriticalPath(vertices))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-8\" class=\"outline-3\">\n<h3 id=\"sec-12-8\"><a id=\"ID-2cc0ad1c-6ce9-4d60-ac96-d283eed3f29f\" name=\"ID-2cc0ad1c-6ce9-4d60-ac96-d283eed3f29f\"></a><span class=\"section-number-3\">12.8</span> <span class=\"done DONE\">DONE</span> 最小生成树</h3>\n<div class=\"outline-text-3\" id=\"text-12-8\">\n</div>\n<div id=\"outline-container-sec-12-8-1\" class=\"outline-4\">\n<h4 id=\"sec-12-8-1\"><a id=\"ID-82f5c23b-db35-41e3-bc03-03c46e5cb281\" name=\"ID-82f5c23b-db35-41e3-bc03-03c46e5cb281\"></a><span class=\"section-number-4\">12.8.1</span> <span class=\"done DONE\">DONE</span> Prim算法</h4>\n<div class=\"outline-text-4\" id=\"text-12-8-1\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> mstPrim(vertices AdjList, s <span class=\"typename\">int</span>) EdgeList {</span><br><span class=\"line\">  visited := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  dist := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  parent := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> dist {</span><br><span class=\"line\">    dist[i] = math.MaxInt32</span><br><span class=\"line\">    parent[i] = -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  dist[s] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices)-<span class=\"number\">1</span>; i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    minDist := math.MaxInt32</span><br><span class=\"line\">    minIndex := -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(dist); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> visited[j] == <span class=\"number\">0</span> &amp;&amp; dist[j] &lt; minDist {</span><br><span class=\"line\">\tminDist = dist[j]</span><br><span class=\"line\">\tminIndex = j</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    visited[minIndex] = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">    u := minIndex</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      <span class=\"keyword\">if</span> visited[v] == <span class=\"number\">0</span> {</span><br><span class=\"line\">\td := vertices[u].ArcNodeArr[j].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> d &lt; dist[v] {</span><br><span class=\"line\">\t  dist[v] = d</span><br><span class=\"line\">\t  parent[v] = u</span><br><span class=\"line\">\t}</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  edges := <span class=\"built_in\">make</span>(EdgeList, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(parent); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> parent[i] != -<span class=\"number\">1</span> {</span><br><span class=\"line\">      edge := Edge{</span><br><span class=\"line\">\tStart:  i,</span><br><span class=\"line\">\tEnd:    parent[i],</span><br><span class=\"line\">\tWeight: dist[i],</span><br><span class=\"line\">      }</span><br><span class=\"line\">      edges = <span class=\"built_in\">append</span>(edges, edge)</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> edges</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">4</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>, Info: <span class=\"number\">4</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">8</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">8</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(mstPrim(vertices, <span class=\"number\">0</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-8-2\" class=\"outline-4\">\n<h4 id=\"sec-12-8-2\"><a id=\"ID-ed39a122-017f-4ca8-8d6a-47d12e9e6c15\" name=\"ID-ed39a122-017f-4ca8-8d6a-47d12e9e6c15\"></a><span class=\"section-number-4\">12.8.2</span> <span class=\"done DONE\">DONE</span> Kruskal算法</h4>\n<div class=\"outline-text-4\" id=\"text-12-8-2\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> mstKruskal(edges EdgeList, vexNum <span class=\"typename\">int</span>) EdgeList {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> findFunc <span class=\"keyword\">func</span>([]<span class=\"typename\">int</span>, <span class=\"typename\">int</span>) <span class=\"typename\">int</span></span><br><span class=\"line\">  findFunc = <span class=\"keyword\">func</span>(parent []<span class=\"typename\">int</span>, i <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> parent[i] == -<span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> i</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> findFunc(parent, parent[i])</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  unionFunc := <span class=\"keyword\">func</span>(parent []<span class=\"typename\">int</span>, i, j <span class=\"typename\">int</span>) {</span><br><span class=\"line\">    iSet := findFunc(parent, i)</span><br><span class=\"line\">    jSet := findFunc(parent, j)</span><br><span class=\"line\">    parent[iSet] = jSet</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  sort.Slice(edges, <span class=\"keyword\">func</span>(i, j <span class=\"typename\">int</span>) <span class=\"typename\">bool</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> edges[i].Weight &lt;= edges[j].Weight</span><br><span class=\"line\">  })</span><br><span class=\"line\"></span><br><span class=\"line\">  parent := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, vexNum)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> parent {</span><br><span class=\"line\">    parent[i] = -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  vcn := <span class=\"number\">0</span></span><br><span class=\"line\">  ans := <span class=\"built_in\">make</span>(EdgeList, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> _, edge := <span class=\"keyword\">range</span> edges {</span><br><span class=\"line\">    u := findFunc(parent, edge.Start)</span><br><span class=\"line\">    v := findFunc(parent, edge.End)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> u == v {</span><br><span class=\"line\">      <span class=\"keyword\">continue</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    unionFunc(parent, u, v)</span><br><span class=\"line\">    ans = <span class=\"built_in\">append</span>(ans, edge)</span><br><span class=\"line\">    vcn += <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> vcn == vexNum-<span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> ans</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"sort\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  edges := []Edge{</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">0</span>, End: <span class=\"number\">1</span>, Weight: <span class=\"number\">4</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">0</span>, End: <span class=\"number\">7</span>, Weight: <span class=\"number\">8</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">1</span>, End: <span class=\"number\">2</span>, Weight: <span class=\"number\">8</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">1</span>, End: <span class=\"number\">7</span>, Weight: <span class=\"number\">11</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">2</span>, End: <span class=\"number\">3</span>, Weight: <span class=\"number\">7</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">2</span>, End: <span class=\"number\">5</span>, Weight: <span class=\"number\">4</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">8</span>, End: <span class=\"number\">2</span>, Weight: <span class=\"number\">2</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">3</span>, End: <span class=\"number\">4</span>, Weight: <span class=\"number\">9</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">3</span>, End: <span class=\"number\">5</span>, Weight: <span class=\"number\">14</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">5</span>, End: <span class=\"number\">4</span>, Weight: <span class=\"number\">10</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">6</span>, End: <span class=\"number\">5</span>, Weight: <span class=\"number\">2</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">8</span>, End: <span class=\"number\">6</span>, Weight: <span class=\"number\">6</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">7</span>, End: <span class=\"number\">6</span>, Weight: <span class=\"number\">1</span>},</span><br><span class=\"line\">    Edge{Start: <span class=\"number\">7</span>, End: <span class=\"number\">8</span>, Weight: <span class=\"number\">7</span>},</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(mstKruskal(edges, <span class=\"number\">9</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-12-9\" class=\"outline-3\">\n<h3 id=\"sec-12-9\"><a id=\"ID-1525562c-45af-4e54-a266-30fbb556d800\" name=\"ID-1525562c-45af-4e54-a266-30fbb556d800\"></a><span class=\"section-number-3\">12.9</span> <span class=\"done DONE\">DONE</span> 最短路径</h3>\n<div class=\"outline-text-3\" id=\"text-12-9\">\n</div>\n<div id=\"outline-container-sec-12-9-1\" class=\"outline-4\">\n<h4 id=\"sec-12-9-1\"><a id=\"ID-18499517-2422-43a9-9be8-037612bd841f\" name=\"ID-18499517-2422-43a9-9be8-037612bd841f\"></a><span class=\"section-number-4\">12.9.1</span> <span class=\"done DONE\">DONE</span> 单源最短路径</h4>\n<div class=\"outline-text-4\" id=\"text-12-9-1\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-11 Wed 22:41]</span></span>\n</li>\n</ul>\n</div>\n<ol class=\"org-ol\"><li><a id=\"sec-12-9-1-1\" name=\"sec-12-9-1-1\"></a><a id=\"ID-50c8015b-fe52-4712-9939-049c7acf4a68\" name=\"ID-50c8015b-fe52-4712-9939-049c7acf4a68\"></a><span class=\"done DONE\">DONE</span> Dijkstra算法<br><div class=\"outline-text-5\" id=\"text-12-9-1-1\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> dijkstra(vertices AdjList, s <span class=\"typename\">int</span>) []<span class=\"typename\">int</span> {</span><br><span class=\"line\">  visited := <span class=\"built_in\">make</span>([]<span class=\"typename\">bool</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  dis := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> dis {</span><br><span class=\"line\">    dis[i] = math.MaxInt32</span><br><span class=\"line\">  }</span><br><span class=\"line\">  dis[s] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> {</span><br><span class=\"line\">    min := math.MaxInt32</span><br><span class=\"line\">    t := -<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">if</span> !visited[u] &amp;&amp; dis[u] &lt; min {</span><br><span class=\"line\">\tmin = dis[u]</span><br><span class=\"line\">\tt = u</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> t == -<span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">break</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    visited[t] = <span class=\"constant\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[t].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[t].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      d := vertices[t].ArcNodeArr[j].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">      <span class=\"keyword\">if</span> !visited[v] &amp;&amp; dis[t]+d &lt; dis[v] {</span><br><span class=\"line\">\tdis[v] = dis[t] + d</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dis</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">10</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">1</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">9</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>, Info: <span class=\"number\">7</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(dijkstra(vertices, <span class=\"number\">0</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</li>\n<li><a id=\"sec-12-9-1-2\" name=\"sec-12-9-1-2\"></a><a id=\"ID-a7eee7e4-97d6-4fde-9f83-3d215051fa35\" name=\"ID-a7eee7e4-97d6-4fde-9f83-3d215051fa35\"></a><span class=\"done DONE\">DONE</span> Bellman–Ford算法<br><div class=\"outline-text-5\" id=\"text-12-9-1-2\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> bellmanFord(vertices AdjList, s <span class=\"typename\">int</span>) ([]<span class=\"typename\">int</span>, <span class=\"typename\">bool</span>) {</span><br><span class=\"line\">  dist := <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> dist {</span><br><span class=\"line\">    dist[i] = math.MaxInt32</span><br><span class=\"line\">  }</span><br><span class=\"line\">  dist[s] = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &lt; <span class=\"built_in\">len</span>(vertices); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">\tv := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">\td := vertices[u].ArcNodeArr[j].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dist[u]+d &lt; dist[v] {</span><br><span class=\"line\">\t  dist[v] = dist[u] + d</span><br><span class=\"line\">\t}</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      d := vertices[u].ArcNodeArr[j].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      <span class=\"keyword\">if</span> dist[u]+d &lt; dist[v] {</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dist, <span class=\"constant\">true</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dist, <span class=\"constant\">false</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">10</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">1</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">9</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>, Info: <span class=\"number\">7</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(bellmanFord(vertices, <span class=\"number\">0</span>))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</li></ol>\n</div>\n<div id=\"outline-container-sec-12-9-2\" class=\"outline-4\">\n<h4 id=\"sec-12-9-2\"><a id=\"ID-dfd52b75-ea84-4ff9-bde6-cc869e4559df\" name=\"ID-dfd52b75-ea84-4ff9-bde6-cc869e4559df\"></a><span class=\"section-number-4\">12.9.2</span> <span class=\"done DONE\">DONE</span> 每对顶点间的最短路径</h4>\n<div class=\"outline-text-4\" id=\"text-12-9-2\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-11 Wed 22:43]</span></span>\n</li>\n</ul>\n</div>\n<ol class=\"org-ol\"><li><a id=\"sec-12-9-2-1\" name=\"sec-12-9-2-1\"></a><a id=\"ID-2d028a64-270b-49ac-abad-026f1f711f9b\" name=\"ID-2d028a64-270b-49ac-abad-026f1f711f9b\"></a><span class=\"done DONE\">DONE</span> Floyd-Warshall算法<br><div class=\"outline-text-5\" id=\"text-12-9-2-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-11 Wed 17:18]</span></span>\n</li>\n</ul>\n</div>\n<ol class=\"org-ol\"><li><a id=\"sec-12-9-2-1-1\" name=\"sec-12-9-2-1-1\"></a><a id=\"ID-7f75bdf3-e47a-412f-bead-12ed9fedf9c4\" name=\"ID-7f75bdf3-e47a-412f-bead-12ed9fedf9c4\"></a><span class=\"done DONE\">DONE</span> 原理描述<br><div class=\"outline-text-6\" id=\"text-12-9-2-1-1\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-11 Wed 16:47]</span></span>\n</li>\n</ul>\n<p>\nFloyd-Warshall算法的原理是动态规划。\n设 D<sub>{i,j,k}</sub>为从 i到 j的只以 (1..k)集合中的节点为中间节点的最短路径的长度。\n</p>\n\n<p>\n若最短路径经过点k，则 D<sub>{i,j,k}</sub>=D<sub>{i,k,k-1}</sub>+D<sub>{k,j,k-1}</sub>；\n若最短路径不经过点k，则 D<sub>{i,j,k}</sub>=D<sub>{i,j,k-1}</sub>。\n因此， D<sub>{i,j,k}</sub>=min(D<sub>{i,j,k-1}</sub>,D<sub>{i,k,k-1}</sub>+D<sub>{k,j,k-1}</sub>)。\n</p>\n\n<p>\n在实际算法中，为了节约空间，可以直接在原来空间上进行迭代，这样空间可降至二维。\n</p>\n</div>\n</li>\n\n<li><a id=\"sec-12-9-2-1-2\" name=\"sec-12-9-2-1-2\"></a><a id=\"ID-4be324f8-f5c8-4e5e-9280-d23607c81ee6\" name=\"ID-4be324f8-f5c8-4e5e-9280-d23607c81ee6\"></a><span class=\"done DONE\">DONE</span> 算法实现<br><div class=\"outline-text-6\" id=\"text-12-9-2-1-2\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-04-11 Wed 17:18]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> floydWarshall(vertices AdjList) [][]<span class=\"typename\">int</span> {</span><br><span class=\"line\">  dist := <span class=\"built_in\">make</span>([][]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> dist {</span><br><span class=\"line\">    dist[i] = <span class=\"built_in\">make</span>([]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j, _ := <span class=\"keyword\">range</span> dist[i] {</span><br><span class=\"line\">      dist[i][j] = math.MaxInt32</span><br><span class=\"line\">    }</span><br><span class=\"line\">    dist[i][i] = <span class=\"number\">0</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      d := vertices[u].ArcNodeArr[j].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      dist[u][v] = d</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> k := <span class=\"number\">0</span>; k &lt; <span class=\"built_in\">len</span>(vertices); k += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &lt; <span class=\"built_in\">len</span>(vertices); i += <span class=\"number\">1</span> {</span><br><span class=\"line\">      <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> dist[i][j] &gt; dist[i][k]+dist[k][j] {</span><br><span class=\"line\">\t  dist[i][j] = dist[i][k] + dist[k][j]</span><br><span class=\"line\">\t}</span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dist</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">10</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">1</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">9</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: -<span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>, Info: <span class=\"number\">7</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(floydWarshall(vertices))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</li></ol>\n</li>\n\n<li><a id=\"sec-12-9-2-2\" name=\"sec-12-9-2-2\"></a><a id=\"ID-52a1b1e6-6785-4821-89f9-b827fc2d8bac\" name=\"ID-52a1b1e6-6785-4821-89f9-b827fc2d8bac\"></a><span class=\"done DONE\">DONE</span> Johnson算法<br><div class=\"outline-text-5\" id=\"text-12-9-2-2\">\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">func</span> johnson(vertices AdjList) ([][]<span class=\"typename\">int</span>, <span class=\"typename\">bool</span>) {</span><br><span class=\"line\">  v := VNode{</span><br><span class=\"line\">    Data:       <span class=\"built_in\">len</span>(vertices),</span><br><span class=\"line\">    ArcNodeArr: <span class=\"built_in\">make</span>([]ArcNode, <span class=\"built_in\">len</span>(vertices)),</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> vertices {</span><br><span class=\"line\">    v.ArcNodeArr[i] = ArcNode{</span><br><span class=\"line\">      AdjVex: i,</span><br><span class=\"line\">      Info:   <span class=\"number\">0</span>,</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  vertices = <span class=\"built_in\">append</span>(vertices, v)</span><br><span class=\"line\"></span><br><span class=\"line\">  hDist, bCycle := bellmanFord(vertices, <span class=\"built_in\">len</span>(vertices)-<span class=\"number\">1</span>)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> bCycle {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> [][]<span class=\"typename\">int</span>{}, bCycle</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u := <span class=\"number\">0</span>; u &lt; <span class=\"built_in\">len</span>(vertices); u += <span class=\"number\">1</span> {</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j := <span class=\"number\">0</span>; j &lt; <span class=\"built_in\">len</span>(vertices[u].ArcNodeArr); j += <span class=\"number\">1</span> {</span><br><span class=\"line\">      v := vertices[u].ArcNodeArr[j].AdjVex</span><br><span class=\"line\">      d := vertices[u].ArcNodeArr[j].Info.(<span class=\"typename\">int</span>)</span><br><span class=\"line\">      d = d + (hDist[u] - hDist[v])</span><br><span class=\"line\">      vertices[u].ArcNodeArr[j].Info = d</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  vertices = vertices[:<span class=\"built_in\">len</span>(vertices)-<span class=\"number\">1</span>]</span><br><span class=\"line\">  dist := <span class=\"built_in\">make</span>([][]<span class=\"typename\">int</span>, <span class=\"built_in\">len</span>(vertices))</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i, _ := <span class=\"keyword\">range</span> vertices {</span><br><span class=\"line\">    dist[i] = dijkstra(vertices, i)</span><br><span class=\"line\">    <span class=\"keyword\">for</span> j, _ := <span class=\"keyword\">range</span> dist[i] {</span><br><span class=\"line\">      dist[i][j] = dist[i][j] + (hDist[j] - hDist[i])</span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> dist, <span class=\"constant\">false</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"math\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  vertices := AdjList{</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">0</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">10</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">5</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">1</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">2</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">1</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">2</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">1</span>, Info: <span class=\"number\">3</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">9</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: <span class=\"number\">2</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">3</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">4</span>, Info: -<span class=\"number\">4</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">    VNode{</span><br><span class=\"line\">      Data: <span class=\"number\">4</span>,</span><br><span class=\"line\">      ArcNodeArr: []ArcNode{</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">0</span>, Info: <span class=\"number\">7</span>},</span><br><span class=\"line\">\tArcNode{AdjVex: <span class=\"number\">3</span>, Info: <span class=\"number\">6</span>},</span><br><span class=\"line\">      },</span><br><span class=\"line\">    },</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  fmt.Println(johnson(vertices))</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</li></ol>\n</div>\n</div>\n</div>\n<div id=\"outline-container-sec-13\" class=\"outline-2\">\n<h2 id=\"sec-13\"><a id=\"ID-9a73a112-d590-42f9-b8df-4eccf738a1fb\" name=\"ID-9a73a112-d590-42f9-b8df-4eccf738a1fb\"></a><span class=\"section-number-2\">13</span> <span class=\"done DONE\">DONE</span> Cache</h2>\n<div class=\"outline-text-2\" id=\"text-13\">\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-23 Fri 17:46]</span></span>\n</li>\n</ul>\n</div>\n<div id=\"outline-container-sec-13-1\" class=\"outline-3\">\n<h3 id=\"sec-13-1\"><a id=\"ID-771c68cc-cf85-4060-9999-ab8e13280ae2\" name=\"ID-771c68cc-cf85-4060-9999-ab8e13280ae2\"></a><span class=\"section-number-3\">13.1</span> <span class=\"done DONE\">DONE</span> LRU</h3>\n<div class=\"outline-text-3\" id=\"text-13-1\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-23 Fri 17:45]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyListNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Key   <span class=\"typename\">int</span></span><br><span class=\"line\">  Value <span class=\"typename\">int</span></span><br><span class=\"line\">  Next  *MyListNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LRUCache <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Capacity <span class=\"typename\">int</span></span><br><span class=\"line\">  Head     *MyListNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> Constructor(capacity <span class=\"typename\">int</span>) LRUCache {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> LRUCache{</span><br><span class=\"line\">    Capacity: capacity,</span><br><span class=\"line\">    Head:     <span class=\"constant\">nil</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *LRUCache) Get(key <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  dummyNode := &amp;MyListNode{</span><br><span class=\"line\">    Next: this.Head,</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  pre := dummyNode</span><br><span class=\"line\">  curr := dummyNode.Next</span><br><span class=\"line\">  <span class=\"keyword\">for</span> curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> curr.Key == key {</span><br><span class=\"line\">      pre.Next = curr.Next</span><br><span class=\"line\">      curr.Next = dummyNode.Next</span><br><span class=\"line\">      dummyNode.Next = curr</span><br><span class=\"line\">      this.Head = dummyNode.Next</span><br><span class=\"line\">      <span class=\"keyword\">return</span> dummyNode.Next.Value</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    pre = curr</span><br><span class=\"line\">    curr = curr.Next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *LRUCache) Put(key <span class=\"typename\">int</span>, value <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  newNode := &amp;MyListNode{</span><br><span class=\"line\">    Key:   key,</span><br><span class=\"line\">    Value: value,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Head == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    this.Head = newNode</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  dummyNode := &amp;MyListNode{</span><br><span class=\"line\">    Next: this.Head,</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> length <span class=\"typename\">int</span></span><br><span class=\"line\">  pre := dummyNode</span><br><span class=\"line\">  curr := dummyNode.Next</span><br><span class=\"line\">  <span class=\"keyword\">for</span> curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> curr.Key == key {</span><br><span class=\"line\">      pre.Next = curr.Next</span><br><span class=\"line\">      curr.Next = dummyNode.Next</span><br><span class=\"line\">      dummyNode.Next = curr</span><br><span class=\"line\">      curr.Value = value</span><br><span class=\"line\">      this.Head = dummyNode.Next</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    pre = curr</span><br><span class=\"line\">    curr = curr.Next</span><br><span class=\"line\">    length += <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> length == this.Capacity {</span><br><span class=\"line\">    curr = dummyNode</span><br><span class=\"line\">    <span class=\"keyword\">for</span> length &gt; <span class=\"number\">1</span> {</span><br><span class=\"line\">      curr = curr.Next</span><br><span class=\"line\">      length -= <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    curr.Next = <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  newNode.Next = dummyNode.Next</span><br><span class=\"line\">  dummyNode.Next = newNode</span><br><span class=\"line\">  this.Head = dummyNode.Next</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyListNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Key   <span class=\"typename\">int</span></span><br><span class=\"line\">  Value <span class=\"typename\">int</span></span><br><span class=\"line\">  Pre   *MyListNode</span><br><span class=\"line\">  Next  *MyListNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LRUCache <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Capacity  <span class=\"typename\">int</span></span><br><span class=\"line\">  Length    <span class=\"typename\">int</span></span><br><span class=\"line\">  Head      *MyListNode</span><br><span class=\"line\">  Tail      *MyListNode</span><br><span class=\"line\">  K2NodeMap <span class=\"keyword\">map</span>[<span class=\"typename\">int</span>]*MyListNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> Constructor(capacity <span class=\"typename\">int</span>) LRUCache {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> LRUCache{</span><br><span class=\"line\">    Capacity:  capacity,</span><br><span class=\"line\">    Length:    <span class=\"number\">0</span>,</span><br><span class=\"line\">    K2NodeMap: <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"typename\">int</span>]*MyListNode),</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *LRUCache) Get(key <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  targetNode := this.getNode(key)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> targetNode != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> targetNode.Value</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *LRUCache) getNode(key <span class=\"typename\">int</span>) *MyListNode {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Length == <span class=\"number\">0</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> targetNode, ok := this.K2NodeMap[key]; ok {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> targetNode == this.Head {</span><br><span class=\"line\">      <span class=\"keyword\">return</span> targetNode</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> targetNode.Pre != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      targetNode.Pre.Next = targetNode.Next</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">if</span> targetNode.Next != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      targetNode.Next.Pre = targetNode.Pre</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> this.Tail == targetNode {</span><br><span class=\"line\">      this.Tail = targetNode.Pre</span><br><span class=\"line\">      <span class=\"keyword\">if</span> this.Tail != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">\tthis.Tail.Next = <span class=\"constant\">nil</span></span><br><span class=\"line\">      }</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    targetNode.Next = this.Head</span><br><span class=\"line\">    <span class=\"keyword\">if</span> this.Head != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      this.Head.Pre = targetNode</span><br><span class=\"line\">    }</span><br><span class=\"line\">    this.Head = targetNode</span><br><span class=\"line\">    targetNode.Pre = <span class=\"constant\">nil</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> this.Length == <span class=\"number\">1</span> {</span><br><span class=\"line\">      this.Tail = targetNode</span><br><span class=\"line\">    }</span><br><span class=\"line\">    <span class=\"keyword\">return</span> targetNode</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"constant\">nil</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *LRUCache) Put(key <span class=\"typename\">int</span>, value <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Capacity == <span class=\"number\">0</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  targetNode := this.getNode(key)</span><br><span class=\"line\">  <span class=\"keyword\">if</span> targetNode != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    targetNode.Value = value</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  newNode := &amp;MyListNode{</span><br><span class=\"line\">    Key:   key,</span><br><span class=\"line\">    Value: value,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Head == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    this.Length = <span class=\"number\">1</span></span><br><span class=\"line\">    this.Head = newNode</span><br><span class=\"line\">    this.Tail = newNode</span><br><span class=\"line\">    this.K2NodeMap[newNode.Key] = newNode</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Length == this.Capacity {</span><br><span class=\"line\">    <span class=\"built_in\">delete</span>(this.K2NodeMap, this.Tail.Key)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> this.Tail.Pre != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">      this.Tail = this.Tail.Pre</span><br><span class=\"line\">      this.Tail.Next = <span class=\"constant\">nil</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      this.Head, this.Tail = <span class=\"constant\">nil</span>, <span class=\"constant\">nil</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">    this.Length += <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  this.K2NodeMap[newNode.Key] = newNode</span><br><span class=\"line\">  newNode.Next = this.Head</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Head != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    this.Head.Pre = newNode</span><br><span class=\"line\">  }</span><br><span class=\"line\">  this.Head = newNode</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Length == <span class=\"number\">1</span> {</span><br><span class=\"line\">    this.Tail = newNode</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  lru := Constructor(<span class=\"number\">2</span>)</span><br><span class=\"line\">  lru.Put(<span class=\"number\">2</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">  lru.Put(<span class=\"number\">3</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">  fmt.Println(lru.Get(<span class=\"number\">2</span>))</span><br><span class=\"line\">  fmt.Println(lru.Get(<span class=\"number\">3</span>))</span><br><span class=\"line\">  fmt.Println(lru.Get(<span class=\"number\">3</span>))</span><br><span class=\"line\">  lru.Put(<span class=\"number\">4</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">  fmt.Println(lru.Get(<span class=\"number\">2</span>))</span><br><span class=\"line\">  fmt.Println(lru.Get(<span class=\"number\">3</span>))</span><br><span class=\"line\">  fmt.Println(lru.Get(<span class=\"number\">4</span>))</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-sec-13-2\" class=\"outline-3\">\n<h3 id=\"sec-13-2\"><a id=\"ID-bf649716-ea7d-45cb-8dc6-03d61e03a953\" name=\"ID-bf649716-ea7d-45cb-8dc6-03d61e03a953\"></a><span class=\"section-number-3\">13.2</span> <span class=\"done DONE\">DONE</span> LFU</h3>\n<div class=\"outline-text-3\" id=\"text-13-2\">\n\n<ul class=\"org-ul\">\n<li>State \"DONE\"       from \"TODO\"       <span class=\"timestamp-wrapper\"><span class=\"timestamp\">[2018-03-23 Fri 13:54]</span></span>\n</li>\n</ul>\n<div class=\"org-src-container\">\n\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> MyListNode <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Key     <span class=\"typename\">int</span></span><br><span class=\"line\">  Value   <span class=\"typename\">int</span></span><br><span class=\"line\">  Counter <span class=\"typename\">int</span></span><br><span class=\"line\">  Next    *MyListNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">type</span> LFUCache <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">  Capacity <span class=\"typename\">int</span></span><br><span class=\"line\">  Head     *MyListNode</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> Constructor(capacity <span class=\"typename\">int</span>) LFUCache {</span><br><span class=\"line\">  <span class=\"keyword\">return</span> LFUCache{</span><br><span class=\"line\">    Capacity: capacity,</span><br><span class=\"line\">    Head:     <span class=\"constant\">nil</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *LFUCache) Get(key <span class=\"typename\">int</span>) <span class=\"typename\">int</span> {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Capacity == <span class=\"number\">0</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  dummyNode := &amp;MyListNode{</span><br><span class=\"line\">    Next: this.Head,</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  pre := dummyNode</span><br><span class=\"line\">  curr := this.Head</span><br><span class=\"line\">  <span class=\"keyword\">for</span> curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> curr.Key == key {</span><br><span class=\"line\">      curr.Counter += <span class=\"number\">1</span></span><br><span class=\"line\">      pre.Next = curr.Next</span><br><span class=\"line\">      curr.Next = dummyNode.Next</span><br><span class=\"line\">      dummyNode.Next = curr</span><br><span class=\"line\">      this.Head = dummyNode.Next</span><br><span class=\"line\">      <span class=\"keyword\">return</span> dummyNode.Next.Value</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    pre = curr</span><br><span class=\"line\">    curr = curr.Next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> -<span class=\"number\">1</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> (this *LFUCache) Put(key <span class=\"typename\">int</span>, value <span class=\"typename\">int</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Capacity == <span class=\"number\">0</span> {</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  newNode := &amp;MyListNode{</span><br><span class=\"line\">    Key:     key,</span><br><span class=\"line\">    Value:   value,</span><br><span class=\"line\">    Counter: <span class=\"number\">1</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">if</span> this.Head == <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    this.Head = newNode</span><br><span class=\"line\">    <span class=\"keyword\">return</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  dummyNode := &amp;MyListNode{</span><br><span class=\"line\">    Next: this.Head,</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> length <span class=\"typename\">int</span></span><br><span class=\"line\">  pre := dummyNode</span><br><span class=\"line\">  curr := dummyNode.Next</span><br><span class=\"line\">  min_pre, min_curr := pre, curr</span><br><span class=\"line\">  <span class=\"keyword\">for</span> curr != <span class=\"constant\">nil</span> {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> curr.Key == key {</span><br><span class=\"line\">      curr.Counter += <span class=\"number\">1</span></span><br><span class=\"line\">      curr.Value = value</span><br><span class=\"line\">      pre.Next = curr.Next</span><br><span class=\"line\">      curr.Next = dummyNode.Next</span><br><span class=\"line\">      dummyNode.Next = curr</span><br><span class=\"line\">      curr.Value = value</span><br><span class=\"line\">      this.Head = dummyNode.Next</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> min_curr.Counter &gt;= curr.Counter {</span><br><span class=\"line\">      min_pre, min_curr = pre, curr</span><br><span class=\"line\">    }</span><br><span class=\"line\"></span><br><span class=\"line\">    pre = curr</span><br><span class=\"line\">    curr = curr.Next</span><br><span class=\"line\">    length += <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">if</span> length == this.Capacity {</span><br><span class=\"line\">    min_pre.Next = min_curr.Next</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  newNode.Next = dummyNode.Next</span><br><span class=\"line\">  dummyNode.Next = newNode</span><br><span class=\"line\">  this.Head = dummyNode.Next</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n</div>\n\nLast Updated 2018-04-26 Thu 18:42.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 25.3.2 (<a href=\"http://orgmode.org\">Org</a> mode 8.2.10)\n"}
