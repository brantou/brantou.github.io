{"md5":"3aff710f2609fbe145979fb3416c2bb8","content":"\n\n<blockquote>\n<p>\nOrg mode is for keeping notes, maintaining TODO lists, planning projects,\nand authoring documents with a fast and effective plain-text system.\n</p>\n</blockquote>\n\n<p>\n<code>Org-mode</code> 类似于 <code>Markdown</code> , 但是远胜于 <code>Markdown</code> 。\n曾有小伙伴说过， <code>Org-mode</code> 是 <code>Markdown</code> 的封神模式， 个人觉得这话一点不夸张，\n相比较而言， <code>Markdown</code> 只是一套简洁的文档格式， 而 <code>Org-mode</code> 除了涵盖作为文档格式的简洁之外，\n还可用于记笔记，维护 <b>TODO</b> 列表， 工程管理,以及可用于元编程。\n对于元编程的支持请阅读我之前的译文， <a href=\"https://brantou.github.io/2017/04/01/babel-intro/\">Babel: org-mode的元编程</a>。\n</p>\n\n<p>\n所谓的元编程，即是 <code>Org-mode</code> 搭建了一个多语言可以交互执行的环境， 在这个环境中，可选用各语言的特性，来分解执行一个大型任务。\n</p>\n\n<img src=\"/images/babel-fish.jpg\">\n<blockquote>\n<p>\nThe Babel Fish is small, yellow, and simultaneously translates from <br>\none spoken language to another.  <br>\n– The Hitchhiker&rsquo;s Guide to the Galaxy, Douglas Adams\n</p>\n</blockquote>\n\n<p>\n<code>Org-mode</code> 对于比较流行的语言都有很好的支持，\n而且对于新语言，也可以很容易添加支持，本人就给两种语言添加过支持。\n本文章主要讲述 <code>Org-mode</code> 对于 <code>Python</code> 源代码块的支持,\n<code>Python</code> 相当的流行, 所以在 <code>Org-mode</code> 中被很完美的支持。\n<code>Org-mode</code> 中的 <code>Python</code> 源代码块可用于定义函数、过滤器和数据分析、创建图表以及生成可重现的研究论文。\n</p>\n\n<div id=\"outline-container-org3446930\" class=\"outline-2\">\n<h2 id=\"org3446930\"><a id=\"ID-dd1c7aab-e7a8-4c27-a12d-46fbe3f98cdb\"></a><span class=\"section-number-2\">1</span> 配置</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n<p>\n这里假设 <code>Python</code>  的开发环境已配置完毕，若是还没配置，请自行google。\n</p>\n\n<p>\n<code>Org-mode</code> 已内置在新的 <b>Emacs</b> 中，但是默认情况下， 只有 <code>emacs-lisp</code> 可被执行。\n要启用或禁用其他语言, 可通过 <b>Emacs</b> 自定义交互界面来配置  <code>org-babel-load-languages</code> 变量,\n或者将代码添加到 <code>init</code> 文件中, 启用python的代码如下所示:\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight lisp\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"list\">(<span class=\"keyword\">org-babel-do-load-languages</span></span><br><span class=\"line\"> <span class=\"quoted\">'org-babel-load-languages</span></span><br><span class=\"line\"> <span class=\"quoted\">'((python . <span class=\"literal\">t</span>))</span>)</span></span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-org25f6043\" class=\"outline-2\">\n<h2 id=\"org25f6043\"><a id=\"ID-8b5e6e60-dddf-4813-8bfe-2ba85444f3ee\"></a><span class=\"section-number-2\">2</span> Org-mode对于Python源码块的支持</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div>\n<div id=\"outline-container-orgef0f950\" class=\"outline-3\">\n<h3 id=\"orgef0f950\"><a id=\"ID-aaa9eaf4-7c30-48e2-a737-45fe5c77b7c5\"></a><span class=\"section-number-3\">2.1</span> 头参数</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n</div>\n<div id=\"outline-container-orgd59ed0e\" class=\"outline-4\">\n<h4 id=\"orgd59ed0e\"><a id=\"ID-d1554529-76b0-41d1-b0eb-db13448dee88\"></a><span class=\"section-number-4\">2.1.1</span> 语言特定的头参数</h4>\n<div class=\"outline-text-4\" id=\"text-2-1-1\">\n<ul class=\"org-ul\">\n<li>:results {output, value}: 默认 <code>value</code> 模式, 即 <i>functional mode</i>, 像函数一样执行，然后返回计算结果。</li>\n<li>:preamble: 前导代码，插入到最前面（不常用）。 默认为空。</li>\n<li>:return: 要返回的值（仅用于result-type为 <code>value</code> 时，不在 <code>session</code> 模式下;不常用）。\n默认值为空，在 <code>Non-session</code> 模式下，使用 <code>return()</code> 返回值。</li>\n<li>:python: 执行Python代码的程序名称。</li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-org629aa37\" class=\"outline-4\">\n<h4 id=\"org629aa37\"><a id=\"ID-ad484d0a-a8ae-4d72-800e-9a5a41ae3283\"></a><span class=\"section-number-4\">2.1.2</span> 公共头参数</h4>\n<div class=\"outline-text-4\" id=\"text-2-1-2\">\n<ul class=\"org-ul\">\n<li>:seesion [name]: 默认非 <code>session</code> 模式。</li>\n<li>:var data=data-table: <code>Org-mode</code> 的 <code>table</code> 可被当做列表传递给Python代码块。</li>\n<li>:exports {code, results, both, none}: 完全支持 <code>babel</code> 的导出选项。</li>\n</ul>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-org6645f20\" class=\"outline-3\">\n<h3 id=\"org6645f20\"><a id=\"ID-1b1aa351-fb05-4fbe-bdc5-f55b93d38b79\"></a><span class=\"section-number-3\">2.2</span> Sessions</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\npython完全支持 <code>session</code> 模式，包括命名 <code>session</code> 。\n在 <code>session</code> 模式下，代码块都运行在同一个长时间运行的 <code>python</code> 的交互式解释器 <code>session</code> 中，就像你在交互式 <code>python</code> 键入的一样。\n可以拥有多个 <code>session</code> ，而且它们是完全相互独立。\n</p>\n\n<p>\n<code>session</code>  可用于定义函数，设置变量和在源块之间共享代码。\n</p>\n\n<p>\npython中的 <code>session</code> 模式与 <code>non-session</code> 模式略有不同，因为在 <code>session</code> 模式下， 你正在与单个“交互式” <code>python session</code> 交互。\n在 <code>python</code> 的交互模式中，空行是特殊的：它们表示缩进代码块的结束, 所以会写出一些稍微不同的 <code>python</code> 代码。\n</p>\n\n<p>\n另外，在 <code>non-session</code> 模式下，python代码块将被包装在一个函数中， 所以要返回一个值（ <code>:result value mode</code> ），你必须使用一个return语句。\n在 <code>session</code> 模式下， <code>python</code> 代码由解释器直接评估，而不是在一个函数的上下文中，\n最后一个语句的值将被自动返回，因此不能使用 <code>return</code> 语句。\n</p>\n</div>\n\n<div id=\"outline-container-org68a8164\" class=\"outline-4\">\n<h4 id=\"org68a8164\"><a id=\"ID-7e6dfa8c-70a2-402a-ae11-355ebd5b0c31\"></a><span class=\"section-number-4\">2.2.1</span> Session mode</h4>\n<div class=\"outline-text-4\" id=\"text-2-2-1\">\n<pre class=\"example\">\n# blank lines not OK in indented blocks, and don't use return()\n# Source block is passed directly to interactive python;\n# value is value of _ at end.\n#+begin_src python :session\ndef foo(x):\n  if x&gt;0:\n    return x+1\n  else:\n    return x-1\n\nfoo(1)\n#+end_src\n\n#+RESULTS:\n: 2\n</pre>\n</div>\n</div>\n\n<div id=\"outline-container-org461e563\" class=\"outline-4\">\n<h4 id=\"org461e563\"><a id=\"ID-0259c9cf-ebd7-431d-bd21-02f11ac76ca3\"></a><span class=\"section-number-4\">2.2.2</span> Non-session mode</h4>\n<div class=\"outline-text-4\" id=\"text-2-2-2\">\n<pre class=\"example\">\n# blank lines OK in indented blocks, and use return()\n# Entire source block will get indented and used as the body of main()\n#+begin_src python\ndef foo(x):\n  if x&gt;0:\n    return x+1\n\n  else:\n    return x-1\n\nreturn foo(5)\n#+end_src\n\n#+RESULTS:\n: 6\n</pre>\n\n\n<p>\n最后，如果你使用 <code>matplotlib</code> 的图形功能，同时使用 <code>seesion</code> 模式，\n必须显式设置后端, 例如 <b>PDF</b> , <b>PNG</b> 或其他文件导出后端。 见下面示例:\n</p>\n<pre class=\"example\">\n#+begin_src python :session :results file\nimport matplotlib\nmatplotlib.use('Agg')\nimport matplotlib.pyplot as plt\nfig=plt.figure(figsize=(3,2))\nplt.plot([1,3,2])\nfig.tight_layout()\nplt.savefig('images/myfig.pdf')\n'images/myfig.pdf' # return this to org-mode\n#+end_src\n\n#+RESULTS:\n[[file:images/myfig.pdf]]\n</pre>\n</div>\n</div>\n</div>\n\n<div id=\"outline-container-org0d6f03d\" class=\"outline-3\">\n<h3 id=\"org0d6f03d\"><a id=\"ID-499cadec-6fdf-4f0f-91e0-586ecb78bb70\"></a><span class=\"section-number-3\">2.3</span> 返回类型</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<ul class=\"org-ul\">\n<li>value：=value= 结果是代码块中求值的最后一个表达式的值。 <code>session</code> 模式下使用的python解释器特殊变量“_” 来引用最后一个表达式的值。</li>\n<li>output：=output= 结果来自 <code>python</code> 代码打印到 <code>stdout</code> 上任意信息。</li>\n</ul>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org2e17ed6\" class=\"outline-2\">\n<h2 id=\"org2e17ed6\"><a id=\"ID-98d57d43-f1ad-40fe-bae1-9f248c41068e\"></a><span class=\"section-number-2\">3</span> 使用示例</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n<ul class=\"org-ul\">\n<li><p>\nHello World!\n</p>\n<pre class=\"example\">\n#+begin_src python :results output\n  print \"Hello, world!\"\n#+end_src\n\n#+RESULTS:\n: Hello, world!\n</pre></li>\n\n<li><p>\n参数\n</p>\n<pre class=\"example\">\n#+NAME: square\n#+BEGIN_SRC python :var num=5\n  def square(x):\n      return x*x\n\n  return square(num)\n#+END_SRC\n\n#+RESULTS: square\n: 25\n\n#+CALL: square(num=10)\n\n#+RESULTS:\n: 100\n</pre></li>\n\n<li><p>\n文学编程\n</p>\n<pre class=\"example\">\n\n#+NAME: square\n#+BEGIN_SRC python\n  def square(x):\n      return x*x\n#+END_SRC\n\n#+NAME: calc-square\n#+BEGIN_SRC python :var num=5 :noweb strip-export :results output\n  &lt;&lt;square&gt;&gt;\n  print(square(num))\n#+END_SRC\n\n#+RESULTS: calc-square\n: 25\n\n#+CALL: calc-square(num=7)\n\n#+RESULTS:\n: 49\n\n</pre></li>\n\n<li><p>\n内联调用(Inline calling):\n</p>\n<pre class=\"example\">\n2 加 2 等于 src_python{return(2+2)}\n</pre>\n\n<p>\n当导出 <b>HTML</b> 或者 <b>LaTeX/PDF</b> 时，如下所示：\n</p>\n<pre class=\"example\">\n2 加 2 等于 4\n</pre></li>\n\n<li><p>\n使用Org-mode的table作为参数\n</p>\n<pre class=\"example\">\n#+tblname: data_table\n| a | 1 |\n| b | 2 |\n| c | 3 |\n#+begin_src python :var val=1 :var data=data_table\n# Return row specified by val.\n# In non-session mode, use return to return results.\nreturn(data[val])\n#+end_src\n\n#+RESULTS:\n| b | 2 |\n</pre></li>\n\n<li><p>\n绘图\n</p>\n<pre class=\"example\">\n#+begin_src python :results file\n  import matplotlib, numpy\n  matplotlib.use('Agg')\n  import matplotlib.pyplot as plt\n  fig=plt.figure(figsize=(4,2))\n  x=numpy.linspace(-15,15)\n  plt.plot(numpy.sin(x)/x)\n  fig.tight_layout()\n  plt.savefig('../images/python-matplot-fig.png')\n  return '../images/python-matplot-fig.png'\n#+end_src\n\n#+RESULTS:\n[[file:../images/python-matplot-fig.png]]\n</pre>\n\n<img src=\"/images/python-matplot-fig.png\"></li>\n\n<li><p>\n词云\n</p>\n<pre class=\"example\">\n\n#+BEGIN_SRC python :preamble \"# -*- coding: utf-8 -*-\" :results value file\n  import jieba.analyse\n  from wordcloud import WordCloud, ImageColorGenerator\n  import numpy as np\n  from PIL import Image\n  import random\n\n  font_path = '../resource/tyzkaishu.ttf'\n  width = 640\n  height = 480\n\n  text = open('../resource/xiyouji.txt').read()\n  words = jieba.analyse.extract_tags(text, topK=200, withWeight=True)\n\n  word_freqs = {}\n  for word in words:\n      word_freqs[word[0]] = word[1]\n\n  mask = np.array(Image.open('../resource/stormtrooper_mask.png'))\n  wordcloud = WordCloud(\n      font_path=font_path, width=width, height=height,\n      mask=mask).generate_from_frequencies(word_freqs)\n  wordcloud.to_file('../images/xiyouji-mask.png')\n  return '../images/xiyouji-mask.png'\n#+END_SRC\n\n#+RESULTS:\n[[file:../images/xiyouji-mask.png]]\n\n</pre>\n\n<img src=\"/images/xiyouji-mask.png\"></li>\n</ul>\n</div>\n</div>\n\n<div id=\"outline-container-org1c56f44\" class=\"outline-2\">\n<h2 id=\"org1c56f44\"><a id=\"ID-411b11c2-85b5-40ca-894b-c915ddb9325e\"></a><span class=\"section-number-2\">4</span> 前方预警</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n当把 <code>utf-8</code> 的字符串传给 <code>Python</code> , 需要格外小心。\n</p>\n</div>\n\n<div id=\"outline-container-org49d0030\" class=\"outline-3\">\n<h3 id=\"org49d0030\"><a id=\"ID-005389e6-3af8-4987-a226-7d857f9fe35f\"></a><span class=\"section-number-3\">4.1</span> 传递utf-8字符串到Python</h3>\n<div class=\"outline-text-3\" id=\"text-4-1\">\n<pre class=\"example\">\n#+NAME: unicode_str\n#+BEGIN_EXAMPLE\n  “this string is not ascii!”\n#+END_EXAMPLE\n\n</pre>\n\n<pre class=\"example\">\n#+NAME: error-in-passing-var\n#+BEGIN_SRC python :var data=unicode_str\n  return data\n#+END_SRC\n\n</pre>\n\n<pre class=\"example\">\n#+RESULTS: error-in-passing-var\n\n</pre>\n\n<p>\n上面代码不会生成任何输出, 并在 <code>*Org-Babel Error Output*</code> 的缓冲区中打印以下消息:\n</p>\n<blockquote>\n<p>\nFile &ldquo;&lt;stdin&gt;&rdquo;, line 3\nSyntaxError: Non-ASCII character &rsquo;\\xe2&rsquo; in file &lt;stdin&gt; on line 3, but no encoding declared; see <a href=\"http://python.org/dev/peps/pep-0263/\">http://python.org/dev/peps/pep-0263/</a> for details\n</p>\n</blockquote>\n</div>\n</div>\n\n<div id=\"outline-container-orgaa1ba52\" class=\"outline-3\">\n<h3 id=\"orgaa1ba52\"><a id=\"ID-9e5a70ba-c852-4a19-8200-d20c395ab2af\"></a><span class=\"section-number-3\">4.2</span> 传递utf-8字符串到Python的变通方法</h3>\n<div class=\"outline-text-3\" id=\"text-4-2\">\n<p>\n一个变通方法是使用 <code>:preamble</code> ,如下所示:\n</p>\n<pre class=\"example\">\n#+NAME: ok-in-passing-var\n#+BEGIN_SRC python :preamble \"# -*- coding: utf-8 -*-\" :var data=unicode_str\n  return data\n#+END_SRC\n\n</pre>\n\n<pre class=\"example\">\n#+RESULTS: ok-in-passing-var\n: “this string is not ascii!”\n\n</pre>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org74832b7\" class=\"outline-2\">\n<h2 id=\"org74832b7\"><a id=\"ID-86504328-89bc-461b-805b-ab7d0f252ad6\"></a><span class=\"section-number-2\">5</span> 参考文档</h2>\n<div class=\"outline-text-2\" id=\"text-5\">\n<ul class=\"org-ul\">\n<li><a href=\"http://orgmode.org/worg/org-contrib/babel/languages/ob-doc-python.html\">Python Source Code Blocks in Org Mode</a></li>\n<li><a href=\"https://brantou.github.io/2017/04/01/babel-intro/\">Babel: org-mode的元编程</a></li>\n<li><a href=\"https://brantou.github.io/2017/06/12/go-source-code-block-in-org/\">在Org-mode中执行Go代码</a></li>\n<li><a href=\"http://orgmode.org/manual/Working-With-Source-Code.html#Working-With-Source-Code\">Working with source code</a></li>\n<li><a href=\"http://orgmode.org/worg/org-contrib/babel/\">Babel: active code in Org-mode</a></li>\n</ul>\n</div>\n</div>\n\nLast Updated 2017-08-31 Thu 22:25.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 24.5.1 (<a href=\"http://orgmode.org\">Org</a> mode 9.0.6)\n"}
