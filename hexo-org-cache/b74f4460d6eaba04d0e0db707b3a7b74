{"md5":"b850d1b9acc1fb284e794da582f3fa74","content":"\n\n<p>\n  从四月份下半月开始，陆陆续续面试了几家公司，都是golang的岗位。每一次面试，侧重点都会有不同，有的会直接给过来一道试题，\n然后边解题，边讲述自己的思路，然后面试官根据你的思路和你交流沟通；有的呢，让讲述自己最近做过的项目，遇到的难点，\n自己怎么解决的问题思路，而无独有偶的呢，这样的面试中，都要需要展示编码能力。这篇文章就把自己最近面试中遇到的每一个编程问题，\n分三步阐述出来：问题描述，解题思路，实际编程。\n</p>\n\n<div id=\"outline-container-orgdb367e0\" class=\"outline-2\">\n<h2 id=\"orgdb367e0\"><span class=\"section-number-2\">1</span> 交替打印数字和字母</h2>\n<div class=\"outline-text-2\" id=\"text-1\">\n</div><div id=\"outline-container-org5451f94\" class=\"outline-3\">\n<h3 id=\"org5451f94\"><span class=\"section-number-3\">1.1</span> 问题描述</h3>\n<div class=\"outline-text-3\" id=\"text-1-1\">\n<p>\n使用两个 <code>goroutine</code> 交替打印序列，一个 <code>goroutinue</code> 打印数字，\n另外一个goroutine打印字母， 最终效果如下 <i>12AB34CD56EF78GH910IJ</i> 。\n</p>\n</div>\n</div>\n<div id=\"outline-container-org967c8f1\" class=\"outline-3\">\n<h3 id=\"org967c8f1\"><span class=\"section-number-3\">1.2</span> 解题思路</h3>\n<div class=\"outline-text-3\" id=\"text-1-2\">\n<p>\n问题很简单，使用 <code>channel</code> 来控制打印的进度。使用两个 <code>channel</code> ，来分别控制数字和字母的打印序列，\n数字打印完成后通过 <code>channel</code> 通知字母打印, 字母打印完成后通知数字打印，然后周而复始的工作。\n</p>\n</div>\n</div>\n<div id=\"outline-container-org0961417\" class=\"outline-3\">\n<h3 id=\"org0961417\"><span class=\"section-number-3\">1.3</span> 实际编码</h3>\n<div class=\"outline-text-3\" id=\"text-1-3\">\n<div class=\"org-src-container\">\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\">chan_n := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"typename\">bool</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">chan_c := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"typename\">bool</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">done := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> <span class=\"keyword\">struct</span>{})</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"keyword\">func</span>() {</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">1</span>; i &amp;lt; <span class=\"number\">11</span>; i += <span class=\"number\">2</span> {</span><br><span class=\"line\">    &amp;lt;-chan_c</span><br><span class=\"line\">    fmt.Print(i)</span><br><span class=\"line\">    fmt.Print(i + <span class=\"number\">1</span>)</span><br><span class=\"line\">    chan_n &amp;lt;- <span class=\"constant\">true</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">}()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">go</span> <span class=\"keyword\">func</span>() {</span><br><span class=\"line\">  char_seq := []<span class=\"typename\">string</span>{<span class=\"string\">\"A\"</span>,<span class=\"string\">\"B\"</span>,<span class=\"string\">\"C\"</span>,<span class=\"string\">\"D\"</span>,<span class=\"string\">\"E\"</span>,<span class=\"string\">\"F\"</span>,<span class=\"string\">\"G\"</span>,<span class=\"string\">\"H\"</span>,<span class=\"string\">\"I\"</span>,<span class=\"string\">\"J\"</span>,<span class=\"string\">\"K\"</span>}</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">10</span>; i += <span class=\"number\">2</span> {</span><br><span class=\"line\">    &amp;lt;-chan_n</span><br><span class=\"line\">    fmt.Print(char_seq[i])</span><br><span class=\"line\">    fmt.Print(char_seq[i+<span class=\"number\">1</span>])</span><br><span class=\"line\">    chan_c &amp;lt;- <span class=\"constant\">true</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  done &amp;lt;- <span class=\"keyword\">struct</span>{}{}</span><br><span class=\"line\">}()</span><br><span class=\"line\"></span><br><span class=\"line\">chan_c &amp;lt;- <span class=\"constant\">true</span></span><br><span class=\"line\">&amp;lt;-done</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n代码执行结果:\n</p>\n<pre class=\"example\">\n12AB34CD56EF78GH910IJ\n\n</pre>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org948b700\" class=\"outline-2\">\n<h2 id=\"org948b700\"><span class=\"section-number-2\">2</span> 随机抽奖</h2>\n<div class=\"outline-text-2\" id=\"text-2\">\n</div><div id=\"outline-container-org8482e6b\" class=\"outline-3\">\n<h3 id=\"org8482e6b\"><span class=\"section-number-3\">2.1</span> 问题描述</h3>\n<div class=\"outline-text-3\" id=\"text-2-1\">\n<p>\n用户随机抽奖，数据结构如下所示：\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// map&amp;#20013;&amp;#65292;key&amp;#20195;&amp;#34920;&amp;#21517;&amp;#31216;&amp;#65292;value&amp;#20195;&amp;#34920;&amp;#25104;&amp;#20132;&amp;#21333;&amp;#25968;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span> = <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span>{</span><br><span class=\"line\">  <span class=\"string\">\"a\"</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">  <span class=\"string\">\"c\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"string\">\"d\"</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"string\">\"f\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgc927846\" class=\"outline-3\">\n<h3 id=\"orgc927846\"><span class=\"section-number-3\">2.2</span> 解决思路</h3>\n<div class=\"outline-text-3\" id=\"text-2-2\">\n<p>\n从map中选取随机用户，拿到这个编码问题，有点懵逼,但仔细一想，只需把关注用户的区间，转变一下数据结构即解题。\n把map转成array，思考起来就简单多了，原有问题变成了从0至n-1中选取一个数字，数字对应的用户即中奖用户。\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgd93ee05\" class=\"outline-3\">\n<h3 id=\"orgd93ee05\"><span class=\"section-number-3\">2.3</span> 实际编码</h3>\n<div class=\"outline-text-3\" id=\"text-2-3\">\n<div class=\"org-src-container\">\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> GetAwardUserName(users <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span>) (name <span class=\"typename\">string</span>) {</span><br><span class=\"line\">  sizeOfUsers := <span class=\"built_in\">len</span>(users)</span><br><span class=\"line\">  award_index := rand.Intn(sizeOfUsers)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> index <span class=\"typename\">int</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> u_name, _ := <span class=\"keyword\">range</span> users {</span><br><span class=\"line\">    <span class=\"keyword\">if</span> index == award_index {</span><br><span class=\"line\">      name = u_name</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">    index += <span class=\"number\">1</span></span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> users <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span> = <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span>{</span><br><span class=\"line\">    <span class=\"string\">\"a\"</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">\"b\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">    <span class=\"string\">\"c\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">    <span class=\"string\">\"d\"</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">    <span class=\"string\">\"e\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"string\">\"f\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  rand.Seed(time.Now().Unix())</span><br><span class=\"line\">  award_stat := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">1000</span>; i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    name := GetAwardUserName(users)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count, ok := award_stat[name]; ok {</span><br><span class=\"line\">      award_stat[name] = count + <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      award_stat[name] = <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> name, count := <span class=\"keyword\">range</span> award_stat {</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"user: %s, award count: %d\\n\"</span>, name, count)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n代码执行结果：\n</p>\n<pre class=\"example\">\nuser: f, award count: 178\nuser: d, award count: 152\nuser: b, award count: 159\nuser: e, award count: 182\nuser: c, award count: 170\nuser: a, award count: 159\n\n</pre>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org44916aa\" class=\"outline-2\">\n<h2 id=\"org44916aa\"><span class=\"section-number-2\">3</span> 权重抽奖</h2>\n<div class=\"outline-text-2\" id=\"text-3\">\n</div><div id=\"outline-container-org0f66277\" class=\"outline-3\">\n<h3 id=\"org0f66277\"><span class=\"section-number-3\">3.1</span> 问题描述</h3>\n<div class=\"outline-text-3\" id=\"text-3-1\">\n<p>\n数据结构和上面一致，只是问题发生变化，需要更加用户的成单数来抽奖，用户成单越多，中奖概率越高，结构如下所示：\n</p>\n<div class=\"org-src-container\">\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// map&amp;#20013;&amp;#65292;key&amp;#20195;&amp;#34920;&amp;#21517;&amp;#31216;&amp;#65292;value&amp;#20195;&amp;#34920;&amp;#25104;&amp;#20132;&amp;#21333;&amp;#25968;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> users <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span> = <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span>{</span><br><span class=\"line\">  <span class=\"string\">\"a\"</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">  <span class=\"string\">\"b\"</span>: <span class=\"number\">6</span>,</span><br><span class=\"line\">  <span class=\"string\">\"c\"</span>: <span class=\"number\">3</span>,</span><br><span class=\"line\">  <span class=\"string\">\"d\"</span>: <span class=\"number\">12</span>,</span><br><span class=\"line\">  <span class=\"string\">\"f\"</span>: <span class=\"number\">1</span>,</span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n</div>\n</div>\n<div id=\"outline-container-orgcc28ce5\" class=\"outline-3\">\n<h3 id=\"orgcc28ce5\"><span class=\"section-number-3\">3.2</span> 解决思路</h3>\n<div class=\"outline-text-3\" id=\"text-3-2\">\n<p>\n这一题是上一题的延伸，加了订单数进去，做为权重来为用户抽奖。此题和上面的问题如此的相似，可把上面的问题，\n理解成所有的用户权重都相同的抽奖，而此题是权重不同的抽奖。解决此问题，依旧是把map转为数组来思考，\n把各用户的权重，从前到后依次拼接到数轴上，数轴的起点到终点即时中奖区间，而随机数落到的那个用户的区间，那个用户即为中奖用户。\n</p>\n</div>\n</div>\n<div id=\"outline-container-orgb168527\" class=\"outline-3\">\n<h3 id=\"orgb168527\"><span class=\"section-number-3\">3.3</span> 实际编码</h3>\n<div class=\"outline-text-3\" id=\"text-3-3\">\n<div class=\"org-src-container\">\n<figure class=\"highlight go\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">  <span class=\"string\">\"fmt\"</span></span><br><span class=\"line\">  <span class=\"string\">\"math/rand\"</span></span><br><span class=\"line\">  <span class=\"string\">\"time\"</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> GetAwardUserName(users <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span>) (name <span class=\"typename\">string</span>) {</span><br><span class=\"line\">  <span class=\"keyword\">type</span> A_user <span class=\"keyword\">struct</span> {</span><br><span class=\"line\">    Name   <span class=\"typename\">string</span></span><br><span class=\"line\">    Offset <span class=\"typename\">int64</span></span><br><span class=\"line\">    Num    <span class=\"typename\">int64</span></span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  a_user_arr := <span class=\"built_in\">make</span>([]*A_user, <span class=\"number\">0</span>)</span><br><span class=\"line\">  <span class=\"keyword\">var</span> sum_num <span class=\"typename\">int64</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> name, num := <span class=\"keyword\">range</span> users {</span><br><span class=\"line\">    a_user := &amp;amp;A_user{</span><br><span class=\"line\">      Name:   name,</span><br><span class=\"line\">      Offset: sum_num,</span><br><span class=\"line\">      Num:    num,</span><br><span class=\"line\">    }</span><br><span class=\"line\">    a_user_arr = <span class=\"built_in\">append</span>(a_user_arr, a_user)</span><br><span class=\"line\">    sum_num += num</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  award_num := rand.Int63n(sum_num)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> index, _ := <span class=\"keyword\">range</span> a_user_arr {</span><br><span class=\"line\">    a_user := a_user_arr[index]</span><br><span class=\"line\">    <span class=\"keyword\">if</span> a_user.Offset+a_user.Num &amp;gt; award_num {</span><br><span class=\"line\">      name = a_user.Name</span><br><span class=\"line\">      <span class=\"keyword\">return</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">func</span> main() {</span><br><span class=\"line\">  <span class=\"keyword\">var</span> users <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span> = <span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span>{</span><br><span class=\"line\">    <span class=\"string\">\"a\"</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">\"b\"</span>: <span class=\"number\">5</span>,</span><br><span class=\"line\">    <span class=\"string\">\"c\"</span>: <span class=\"number\">15</span>,</span><br><span class=\"line\">    <span class=\"string\">\"d\"</span>: <span class=\"number\">20</span>,</span><br><span class=\"line\">    <span class=\"string\">\"e\"</span>: <span class=\"number\">10</span>,</span><br><span class=\"line\">    <span class=\"string\">\"f\"</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  rand.Seed(time.Now().Unix())</span><br><span class=\"line\">  award_stat := <span class=\"built_in\">make</span>(<span class=\"keyword\">map</span>[<span class=\"typename\">string</span>]<span class=\"typename\">int64</span>)</span><br><span class=\"line\">  <span class=\"keyword\">for</span> i := <span class=\"number\">0</span>; i &amp;lt; <span class=\"number\">10000</span>; i += <span class=\"number\">1</span> {</span><br><span class=\"line\">    name := GetAwardUserName(users)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> count, ok := award_stat[name]; ok {</span><br><span class=\"line\">      award_stat[name] = count + <span class=\"number\">1</span></span><br><span class=\"line\">    } <span class=\"keyword\">else</span> {</span><br><span class=\"line\">      award_stat[name] = <span class=\"number\">1</span></span><br><span class=\"line\">    }</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">for</span> name, count := <span class=\"keyword\">range</span> award_stat {</span><br><span class=\"line\">    fmt.Printf(<span class=\"string\">\"user: %s, award count: %d\\n\"</span>, name, count)</span><br><span class=\"line\">  }</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span></span><br><span class=\"line\">}</span><br></pre></td></tr></table></figure>\n</div>\n\n<p>\n代码执行结果：\n</p>\n<pre class=\"example\">\nuser: c, award count: 1667\nuser: f, award count: 3310\nuser: e, award count: 1099\nuser: d, award count: 2276\nuser: b, award count: 549\nuser: a, award count: 1099\n\n</pre>\n</div>\n</div>\n</div>\n<div id=\"outline-container-org409625e\" class=\"outline-2\">\n<h2 id=\"org409625e\"><span class=\"section-number-2\">4</span> 总结</h2>\n<div class=\"outline-text-2\" id=\"text-4\">\n<p>\n问题一来自一家公司 , 侧重于语言特性；问题二三来自另外一家公司 ，侧重于解决问题的思路；本人更喜欢第二种，很有启发性。\n我之后会把其他自己认为比较有趣的编程任务，整理到此篇文章中，敬请期待。\n</p>\n</div>\n</div>\n\nLast Updated 2017-05-23 Tue 14:05.<br>Render by <a href=\"https://github.com/CodeFalling/hexo-renderer-org\">hexo-renderer-org</a> with <a href=\"http://www.gnu.org/software/emacs/\">Emacs</a> 24.5.1 (<a href=\"http://orgmode.org\">Org</a> mode 9.0.6)\n"}
